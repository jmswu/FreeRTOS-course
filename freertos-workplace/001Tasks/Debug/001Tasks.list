
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003340  08003340  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003340  08003340  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003340  08003340  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00005188  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005198  20005198  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002162  00000000  00000000  0002e937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00030aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b80  00000000  00000000  00031718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001da41  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e693  00000000  00000000  0004fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8f41  00000000  00000000  0005e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001172ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000332c  00000000  00000000  00117300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032d0 	.word	0x080032d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080032d0 	.word	0x080032d0

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b086      	sub	sp, #24
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	BaseType_t status = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa15 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f823 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f863 	bl	80002ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  	  status = xTaskCreate(task1Handler, "task-1", 50, "Hello world from task 1", 2, &task1Handle);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2302      	movs	r3, #2
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	4b0b      	ldr	r3, [pc, #44]	; (800021c <main+0x4c>)
 80001f0:	2232      	movs	r2, #50	; 0x32
 80001f2:	490b      	ldr	r1, [pc, #44]	; (8000220 <main+0x50>)
 80001f4:	480b      	ldr	r0, [pc, #44]	; (8000224 <main+0x54>)
 80001f6:	f002 f8ee 	bl	80023d6 <xTaskCreate>
 80001fa:	60f8      	str	r0, [r7, #12]
  	  configASSERT(status == pdPASS);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d00a      	beq.n	8000218 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000206:	f383 8811 	msr	BASEPRI, r3
 800020a:	f3bf 8f6f 	isb	sy
 800020e:	f3bf 8f4f 	dsb	sy
 8000212:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000214:	bf00      	nop
 8000216:	e7fe      	b.n	8000216 <main+0x46>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0x48>
 800021a:	bf00      	nop
 800021c:	080032e8 	.word	0x080032e8
 8000220:	08003300 	.word	0x08003300
 8000224:	08000415 	.word	0x08000415

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 f842 	bl	80032c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025a:	2300      	movs	r3, #0
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800025e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fc77 	bl	8000b5c <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000274:	f000 f8ea 	bl	800044c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2101      	movs	r1, #1
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fb6a 	bl	800196c <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029e:	f000 f8d5 	bl	800044c <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002c2:	4b51      	ldr	r3, [pc, #324]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a50      	ldr	r2, [pc, #320]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b4e      	ldr	r3, [pc, #312]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002d6:	613b      	str	r3, [r7, #16]
 80002d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002da:	4b4b      	ldr	r3, [pc, #300]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a4a      	ldr	r2, [pc, #296]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b48      	ldr	r3, [pc, #288]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002f2:	4b45      	ldr	r3, [pc, #276]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a44      	ldr	r2, [pc, #272]	; (8000408 <MX_GPIO_Init+0x15c>)
 80002f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b42      	ldr	r3, [pc, #264]	; (8000408 <MX_GPIO_Init+0x15c>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030a:	4b3f      	ldr	r3, [pc, #252]	; (8000408 <MX_GPIO_Init+0x15c>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a3e      	ldr	r2, [pc, #248]	; (8000408 <MX_GPIO_Init+0x15c>)
 8000310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000314:	6153      	str	r3, [r2, #20]
 8000316:	4b3c      	ldr	r3, [pc, #240]	; (8000408 <MX_GPIO_Init+0x15c>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4b39      	ldr	r3, [pc, #228]	; (8000408 <MX_GPIO_Init+0x15c>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a38      	ldr	r2, [pc, #224]	; (8000408 <MX_GPIO_Init+0x15c>)
 8000328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800032c:	6153      	str	r3, [r2, #20]
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <MX_GPIO_Init+0x15c>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800033a:	2200      	movs	r2, #0
 800033c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000340:	4832      	ldr	r0, [pc, #200]	; (800040c <MX_GPIO_Init+0x160>)
 8000342:	f000 fbf3 	bl	8000b2c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000346:	2337      	movs	r3, #55	; 0x37
 8000348:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800034a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	4619      	mov	r1, r3
 800035a:	482c      	ldr	r0, [pc, #176]	; (800040c <MX_GPIO_Init+0x160>)
 800035c:	f000 fa6c 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000360:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000364:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2300      	movs	r3, #0
 8000370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	4619      	mov	r1, r3
 8000378:	4824      	ldr	r0, [pc, #144]	; (800040c <MX_GPIO_Init+0x160>)
 800037a:	f000 fa5d 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800037e:	2301      	movs	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f000 fa50 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000398:	23e0      	movs	r3, #224	; 0xe0
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800039c:	2302      	movs	r3, #2
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80003a8:	2305      	movs	r3, #5
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	f107 0314 	add.w	r3, r7, #20
 80003b0:	4619      	mov	r1, r3
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f000 fa3f 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80003ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c8:	2303      	movs	r3, #3
 80003ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80003cc:	230e      	movs	r3, #14
 80003ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	4619      	mov	r1, r3
 80003d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003da:	f000 fa2d 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80003de:	23c0      	movs	r3, #192	; 0xc0
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003e2:	2312      	movs	r3, #18
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2300      	movs	r3, #0
 80003ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003ee:	2304      	movs	r3, #4
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	4619      	mov	r1, r3
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_GPIO_Init+0x164>)
 80003fa:	f000 fa1d 	bl	8000838 <HAL_GPIO_Init>

}
 80003fe:	bf00      	nop
 8000400:	3728      	adds	r7, #40	; 0x28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	48001000 	.word	0x48001000
 8000410:	48000400 	.word	0x48000400

08000414 <task1Handler>:

/* USER CODE BEGIN 4 */

static void task1Handler(void* parameters)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]

}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d101      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800043a:	f000 f8fb 	bl	8000634 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40001000 	.word	0x40001000

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x44>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x44>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x44>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_MspInit+0x44>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_MspInit+0x44>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	2036      	movs	r0, #54	; 0x36
 80004b6:	f000 f995 	bl	80007e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004ba:	2036      	movs	r0, #54	; 0x36
 80004bc:	f000 f9ae 	bl	800081c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <HAL_InitTick+0xa0>)
 80004c2:	69db      	ldr	r3, [r3, #28]
 80004c4:	4a1e      	ldr	r2, [pc, #120]	; (8000540 <HAL_InitTick+0xa0>)
 80004c6:	f043 0310 	orr.w	r3, r3, #16
 80004ca:	61d3      	str	r3, [r2, #28]
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <HAL_InitTick+0xa0>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	f003 0310 	and.w	r3, r3, #16
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d8:	f107 0210 	add.w	r2, r7, #16
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4611      	mov	r1, r2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fc56 	bl	8001d94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004e8:	f001 fc32 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80004ec:	4603      	mov	r3, r0
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <HAL_InitTick+0xa4>)
 80004f6:	fba2 2303 	umull	r2, r3, r2, r3
 80004fa:	0c9b      	lsrs	r3, r3, #18
 80004fc:	3b01      	subs	r3, #1
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_InitTick+0xa8>)
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <HAL_InitTick+0xac>)
 8000504:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <HAL_InitTick+0xa8>)
 8000508:	f240 32e7 	movw	r2, #999	; 0x3e7
 800050c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_InitTick+0xa8>)
 8000510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000512:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_InitTick+0xa8>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_InitTick+0xa8>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <HAL_InitTick+0xa8>)
 8000522:	f001 fc69 	bl	8001df8 <HAL_TIM_Base_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d104      	bne.n	8000536 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <HAL_InitTick+0xa8>)
 800052e:	f001 fcc5 	bl	8001ebc <HAL_TIM_Base_Start_IT>
 8000532:	4603      	mov	r3, r0
 8000534:	e000      	b.n	8000538 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	3730      	adds	r7, #48	; 0x30
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	431bde83 	.word	0x431bde83
 8000548:	20005148 	.word	0x20005148
 800054c:	40001000 	.word	0x40001000

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <NMI_Handler+0x4>

08000556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <MemManage_Handler+0x4>

08000562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <UsageFault_Handler+0x4>

0800056e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <TIM6_DAC_IRQHandler+0x10>)
 8000582:	f001 fd05 	bl	8001f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20005148 	.word	0x20005148

08000590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <SystemInit+0x20>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <SystemInit+0x20>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490e      	ldr	r1, [pc, #56]	; (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0b      	ldr	r4, [pc, #44]	; (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005de:	f7ff ffd7 	bl	8000590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f002 fe49 	bl	8003278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fdf3 	bl	80001d0 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005ec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005f8:	08003348 	.word	0x08003348
  ldr r2, =_sbss
 80005fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000600:	20005198 	.word	0x20005198

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f8d8 	bl	80007ce <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff3e 	bl	80004a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff ff18 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000008 	.word	0x20000008
 8000658:	20005194 	.word	0x20005194

0800065c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20005194 	.word	0x20005194

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 021f 	and.w	r2, r3, #31
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff4c 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f6:	f7ff ff61 	bl	80006bc <__NVIC_GetPriorityGrouping>
 80007fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	68b9      	ldr	r1, [r7, #8]
 8000800:	6978      	ldr	r0, [r7, #20]
 8000802:	f7ff ffb1 	bl	8000768 <NVIC_EncodePriority>
 8000806:	4602      	mov	r2, r0
 8000808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff80 	bl	8000714 <__NVIC_SetPriority>
}
 8000814:	bf00      	nop
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff54 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000846:	e154      	b.n	8000af2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 8146 	beq.w	8000aec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 0303 	and.w	r3, r3, #3
 8000868:	2b01      	cmp	r3, #1
 800086a:	d005      	beq.n	8000878 <HAL_GPIO_Init+0x40>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b02      	cmp	r3, #2
 8000876:	d130      	bne.n	80008da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4313      	orrs	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ae:	2201      	movs	r2, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	f003 0201 	and.w	r2, r3, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d017      	beq.n	8000916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	2b02      	cmp	r3, #2
 8000920:	d123      	bne.n	800096a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	220f      	movs	r2, #15
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	08da      	lsrs	r2, r3, #3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3208      	adds	r2, #8
 8000964:	6939      	ldr	r1, [r7, #16]
 8000966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 0203 	and.w	r2, r3, #3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 80a0 	beq.w	8000aec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ac:	4b58      	ldr	r3, [pc, #352]	; (8000b10 <HAL_GPIO_Init+0x2d8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <HAL_GPIO_Init+0x2d8>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <HAL_GPIO_Init+0x2d8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c4:	4a53      	ldr	r2, [pc, #332]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3302      	adds	r3, #2
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	220f      	movs	r2, #15
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009ee:	d019      	beq.n	8000a24 <HAL_GPIO_Init+0x1ec>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a49      	ldr	r2, [pc, #292]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d013      	beq.n	8000a20 <HAL_GPIO_Init+0x1e8>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a48      	ldr	r2, [pc, #288]	; (8000b1c <HAL_GPIO_Init+0x2e4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d00d      	beq.n	8000a1c <HAL_GPIO_Init+0x1e4>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a47      	ldr	r2, [pc, #284]	; (8000b20 <HAL_GPIO_Init+0x2e8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d007      	beq.n	8000a18 <HAL_GPIO_Init+0x1e0>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a46      	ldr	r2, [pc, #280]	; (8000b24 <HAL_GPIO_Init+0x2ec>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d101      	bne.n	8000a14 <HAL_GPIO_Init+0x1dc>
 8000a10:	2304      	movs	r3, #4
 8000a12:	e008      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a14:	2305      	movs	r3, #5
 8000a16:	e006      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a18:	2303      	movs	r3, #3
 8000a1a:	e004      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e002      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a24:	2300      	movs	r3, #0
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	f002 0203 	and.w	r2, r2, #3
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	4093      	lsls	r3, r2
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a36:	4937      	ldr	r1, [pc, #220]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a44:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a68:	4a2f      	ldr	r2, [pc, #188]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a92:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000abc:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f47f aea3 	bne.w	8000848 <HAL_GPIO_Init+0x10>
  }
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	48000c00 	.word	0x48000c00
 8000b24:	48001000 	.word	0x48001000
 8000b28:	40010400 	.word	0x40010400

08000b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b3c:	787b      	ldrb	r3, [r7, #1]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b48:	e002      	b.n	8000b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f000 bef4 	b.w	800195e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 816a 	beq.w	8000e5a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b86:	4bb3      	ldr	r3, [pc, #716]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d00c      	beq.n	8000bac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b92:	4bb0      	ldr	r3, [pc, #704]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b08      	cmp	r3, #8
 8000b9c:	d159      	bne.n	8000c52 <HAL_RCC_OscConfig+0xf6>
 8000b9e:	4bad      	ldr	r3, [pc, #692]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000baa:	d152      	bne.n	8000c52 <HAL_RCC_OscConfig+0xf6>
 8000bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bb0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000bb8:	fa93 f3a3 	rbit	r3, r3
 8000bbc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bc0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc4:	fab3 f383 	clz	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d102      	bne.n	8000bde <HAL_RCC_OscConfig+0x82>
 8000bd8:	4b9e      	ldr	r3, [pc, #632]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	e015      	b.n	8000c0a <HAL_RCC_OscConfig+0xae>
 8000bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000be2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bea:	fa93 f3a3 	rbit	r3, r3
 8000bee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000bfa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c06:	4b93      	ldr	r3, [pc, #588]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c0e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c12:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c16:	fa92 f2a2 	rbit	r2, r2
 8000c1a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c1e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	f042 0220 	orr.w	r2, r2, #32
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	f002 021f 	and.w	r2, r2, #31
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 810c 	beq.w	8000e58 <HAL_RCC_OscConfig+0x2fc>
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8106 	bne.w	8000e58 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f000 be86 	b.w	800195e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5c:	d106      	bne.n	8000c6c <HAL_RCC_OscConfig+0x110>
 8000c5e:	4b7d      	ldr	r3, [pc, #500]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a7c      	ldr	r2, [pc, #496]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e030      	b.n	8000cce <HAL_RCC_OscConfig+0x172>
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x134>
 8000c76:	4b77      	ldr	r3, [pc, #476]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a76      	ldr	r2, [pc, #472]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b74      	ldr	r3, [pc, #464]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a73      	ldr	r2, [pc, #460]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e01e      	b.n	8000cce <HAL_RCC_OscConfig+0x172>
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c9a:	d10c      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x15a>
 8000c9c:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a6c      	ldr	r2, [pc, #432]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b6a      	ldr	r3, [pc, #424]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a69      	ldr	r2, [pc, #420]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e00b      	b.n	8000cce <HAL_RCC_OscConfig+0x172>
 8000cb6:	4b67      	ldr	r3, [pc, #412]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a66      	ldr	r2, [pc, #408]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b64      	ldr	r3, [pc, #400]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a63      	ldr	r2, [pc, #396]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cce:	4b61      	ldr	r3, [pc, #388]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	f023 020f 	bic.w	r2, r3, #15
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	495d      	ldr	r1, [pc, #372]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d059      	beq.n	8000da0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cec:	f7ff fcb6 	bl	800065c <HAL_GetTick>
 8000cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf4:	e00a      	b.n	8000d0c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf6:	f7ff fcb1 	bl	800065c <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d902      	bls.n	8000d0c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	f000 be29 	b.w	800195e <HAL_RCC_OscConfig+0xe02>
 8000d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d102      	bne.n	8000d3e <HAL_RCC_OscConfig+0x1e2>
 8000d38:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	e015      	b.n	8000d6a <HAL_RCC_OscConfig+0x20e>
 8000d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d46:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d5a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d76:	fa92 f2a2 	rbit	r2, r2
 8000d7a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d7e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	f042 0220 	orr.w	r2, r2, #32
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	f002 021f 	and.w	r2, r2, #31
 8000d92:	2101      	movs	r1, #1
 8000d94:	fa01 f202 	lsl.w	r2, r1, r2
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0ab      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x19a>
 8000d9e:	e05c      	b.n	8000e5a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc5c 	bl	800065c <HAL_GetTick>
 8000da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da8:	e00a      	b.n	8000dc0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fc57 	bl	800065c <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d902      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	f000 bdcf 	b.w	800195e <HAL_RCC_OscConfig+0xe02>
 8000dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000dd4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d102      	bne.n	8000df2 <HAL_RCC_OscConfig+0x296>
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	e015      	b.n	8000e1e <HAL_RCC_OscConfig+0x2c2>
 8000df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e0e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_RCC_OscConfig+0x2f8>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e22:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e26:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e2a:	fa92 f2a2 	rbit	r2, r2
 8000e2e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e32:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	f042 0220 	orr.w	r2, r2, #32
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	f002 021f 	and.w	r2, r2, #31
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1ab      	bne.n	8000daa <HAL_RCC_OscConfig+0x24e>
 8000e52:	e002      	b.n	8000e5a <HAL_RCC_OscConfig+0x2fe>
 8000e54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 816f 	beq.w	8001148 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e6a:	4bd0      	ldr	r3, [pc, #832]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e76:	4bcd      	ldr	r3, [pc, #820]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d16c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x400>
 8000e82:	4bca      	ldr	r3, [pc, #808]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d166      	bne.n	8000f5c <HAL_RCC_OscConfig+0x400>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e94:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ea0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d102      	bne.n	8000ebe <HAL_RCC_OscConfig+0x362>
 8000eb8:	4bbc      	ldr	r3, [pc, #752]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	e013      	b.n	8000ee6 <HAL_RCC_OscConfig+0x38a>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ed6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000eda:	fa93 f3a3 	rbit	r3, r3
 8000ede:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000ee2:	4bb2      	ldr	r3, [pc, #712]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000eec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ef0:	fa92 f2a2 	rbit	r2, r2
 8000ef4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000ef8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000efc:	fab2 f282 	clz	r2, r2
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	f042 0220 	orr.w	r2, r2, #32
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	f002 021f 	and.w	r2, r2, #31
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d002      	beq.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	f000 bd1b 	b.w	800195e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4ba0      	ldr	r3, [pc, #640]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	21f8      	movs	r1, #248	; 0xf8
 8000f38:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f40:	fa91 f1a1 	rbit	r1, r1
 8000f44:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f48:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f4c:	fab1 f181 	clz	r1, r1
 8000f50:	b2c9      	uxtb	r1, r1
 8000f52:	408b      	lsls	r3, r1
 8000f54:	4995      	ldr	r1, [pc, #596]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5a:	e0f5      	b.n	8001148 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8085 	beq.w	8001072 <HAL_RCC_OscConfig+0x516>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7e:	fab3 f383 	clz	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2301      	movs	r3, #1
 8000f92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fb62 	bl	800065c <HAL_GetTick>
 8000f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9c:	e00a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fb5d 	bl	800065c <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d902      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f000 bcd5 	b.w	800195e <HAL_RCC_OscConfig+0xe02>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000fc6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	095b      	lsrs	r3, r3, #5
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d102      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x488>
 8000fde:	4b73      	ldr	r3, [pc, #460]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	e013      	b.n	800100c <HAL_RCC_OscConfig+0x4b0>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ffc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001008:	4b68      	ldr	r3, [pc, #416]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	2202      	movs	r2, #2
 800100e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001012:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001016:	fa92 f2a2 	rbit	r2, r2
 800101a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800101e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001022:	fab2 f282 	clz	r2, r2
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f042 0220 	orr.w	r2, r2, #32
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	f002 021f 	and.w	r2, r2, #31
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0af      	beq.n	8000f9e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	21f8      	movs	r1, #248	; 0xf8
 800104e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001056:	fa91 f1a1 	rbit	r1, r1
 800105a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800105e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001062:	fab1 f181 	clz	r1, r1
 8001066:	b2c9      	uxtb	r1, r1
 8001068:	408b      	lsls	r3, r1
 800106a:	4950      	ldr	r1, [pc, #320]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
 8001070:	e06a      	b.n	8001148 <HAL_RCC_OscConfig+0x5ec>
 8001072:	2301      	movs	r3, #1
 8001074:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001084:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001088:	fab3 f383 	clz	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001092:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	461a      	mov	r2, r3
 800109a:	2300      	movs	r3, #0
 800109c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fadd 	bl	800065c <HAL_GetTick>
 80010a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	e00a      	b.n	80010be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fad8 	bl	800065c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d902      	bls.n	80010be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	f000 bc50 	b.w	800195e <HAL_RCC_OscConfig+0xe02>
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80010d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_OscConfig+0x592>
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	e013      	b.n	8001116 <HAL_RCC_OscConfig+0x5ba>
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001106:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_RCC_OscConfig+0x650>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	2202      	movs	r2, #2
 8001118:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800111c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001120:	fa92 f2a2 	rbit	r2, r2
 8001124:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001128:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f042 0220 	orr.w	r2, r2, #32
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f002 021f 	and.w	r2, r2, #31
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1af      	bne.n	80010a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80da 	beq.w	800130c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d069      	beq.n	8001236 <HAL_RCC_OscConfig+0x6da>
 8001162:	2301      	movs	r3, #1
 8001164:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x654>)
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	461a      	mov	r2, r3
 8001188:	2301      	movs	r3, #1
 800118a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fa66 	bl	800065c <HAL_GetTick>
 8001190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001194:	e00e      	b.n	80011b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff fa61 	bl	800065c <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d906      	bls.n	80011b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e3d9      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	10908120 	.word	0x10908120
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ca:	2202      	movs	r2, #2
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	fa93 f2a3 	rbit	r2, r3
 80011d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011e2:	2202      	movs	r2, #2
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f2a3 	rbit	r2, r3
 80011f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	4ba5      	ldr	r3, [pc, #660]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80011f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011fe:	2102      	movs	r1, #2
 8001200:	6019      	str	r1, [r3, #0]
 8001202:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	fa93 f1a3 	rbit	r1, r3
 800120c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001210:	6019      	str	r1, [r3, #0]
  return result;
 8001212:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0b0      	beq.n	8001196 <HAL_RCC_OscConfig+0x63a>
 8001234:	e06a      	b.n	800130c <HAL_RCC_OscConfig+0x7b0>
 8001236:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	fa93 f2a3 	rbit	r2, r3
 8001248:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800124c:	601a      	str	r2, [r3, #0]
  return result;
 800124e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001252:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	4b8c      	ldr	r3, [pc, #560]	; (8001490 <HAL_RCC_OscConfig+0x934>)
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	461a      	mov	r2, r3
 8001264:	2300      	movs	r3, #0
 8001266:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff f9f8 	bl	800065c <HAL_GetTick>
 800126c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	e009      	b.n	8001286 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff f9f3 	bl	800065c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e36b      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
 8001286:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800128a:	2202      	movs	r2, #2
 800128c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	fa93 f2a3 	rbit	r2, r3
 8001298:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012a2:	2202      	movs	r2, #2
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	fa93 f2a3 	rbit	r2, r3
 80012b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012ba:	2202      	movs	r2, #2
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fa93 f2a3 	rbit	r2, r3
 80012c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ce:	4b6f      	ldr	r3, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80012d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012d6:	2102      	movs	r1, #2
 80012d8:	6019      	str	r1, [r3, #0]
 80012da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	fa93 f1a3 	rbit	r1, r3
 80012e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012e8:	6019      	str	r1, [r3, #0]
  return result;
 80012ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1b2      	bne.n	8001272 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8158 	beq.w	80015cc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <HAL_RCC_OscConfig+0x930>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d112      	bne.n	8001354 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b57      	ldr	r3, [pc, #348]	; (800148c <HAL_RCC_OscConfig+0x930>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <HAL_RCC_OscConfig+0x930>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b54      	ldr	r3, [pc, #336]	; (800148c <HAL_RCC_OscConfig+0x930>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800134e:	2301      	movs	r3, #1
 8001350:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_RCC_OscConfig+0x938>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d11a      	bne.n	8001396 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001360:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_RCC_OscConfig+0x938>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <HAL_RCC_OscConfig+0x938>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136c:	f7ff f976 	bl	800065c <HAL_GetTick>
 8001370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e009      	b.n	800138a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff f971 	bl	800065c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e2e9      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b42      	ldr	r3, [pc, #264]	; (8001494 <HAL_RCC_OscConfig+0x938>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0ef      	beq.n	8001376 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x852>
 80013a0:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a39      	ldr	r2, [pc, #228]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e02f      	b.n	800140e <HAL_RCC_OscConfig+0x8b2>
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x876>
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a33      	ldr	r2, [pc, #204]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a30      	ldr	r2, [pc, #192]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013ca:	f023 0304 	bic.w	r3, r3, #4
 80013ce:	6213      	str	r3, [r2, #32]
 80013d0:	e01d      	b.n	800140e <HAL_RCC_OscConfig+0x8b2>
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d10c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x89a>
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a2a      	ldr	r2, [pc, #168]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	e00b      	b.n	800140e <HAL_RCC_OscConfig+0x8b2>
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a24      	ldr	r2, [pc, #144]	; (800148c <HAL_RCC_OscConfig+0x930>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_RCC_OscConfig+0x930>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a21      	ldr	r2, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x930>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d06b      	beq.n	80014f0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff f920 	bl	800065c <HAL_GetTick>
 800141c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff f91b 	bl	800065c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e291      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
 800143a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fa93 f2a3 	rbit	r2, r3
 800144c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001456:	2202      	movs	r2, #2
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fa93 f2a3 	rbit	r2, r3
 8001464:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001468:	601a      	str	r2, [r3, #0]
  return result;
 800146a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800146e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f043 0302 	orr.w	r3, r3, #2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d109      	bne.n	8001498 <HAL_RCC_OscConfig+0x93c>
 8001484:	4b01      	ldr	r3, [pc, #4]	; (800148c <HAL_RCC_OscConfig+0x930>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x958>
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	10908120 	.word	0x10908120
 8001494:	40007000 	.word	0x40007000
 8001498:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	4bbb      	ldr	r3, [pc, #748]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014b8:	2102      	movs	r1, #2
 80014ba:	6011      	str	r1, [r2, #0]
 80014bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	fa92 f1a2 	rbit	r1, r2
 80014c6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014ca:	6011      	str	r1, [r2, #0]
  return result;
 80014cc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f002 021f 	and.w	r2, r2, #31
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d099      	beq.n	8001422 <HAL_RCC_OscConfig+0x8c6>
 80014ee:	e063      	b.n	80015b8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f8b4 	bl	800065c <HAL_GetTick>
 80014f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff f8af 	bl	800065c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e225      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
 8001512:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001516:	2202      	movs	r2, #2
 8001518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fa93 f2a3 	rbit	r2, r3
 8001524:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001540:	601a      	str	r2, [r3, #0]
  return result;
 8001542:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001546:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d102      	bne.n	8001562 <HAL_RCC_OscConfig+0xa06>
 800155c:	4b90      	ldr	r3, [pc, #576]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	e00d      	b.n	800157e <HAL_RCC_OscConfig+0xa22>
 8001562:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001566:	2202      	movs	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001582:	2102      	movs	r1, #2
 8001584:	6011      	str	r1, [r2, #0]
 8001586:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	fa92 f1a2 	rbit	r1, r2
 8001590:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001594:	6011      	str	r1, [r2, #0]
  return result;
 8001596:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	fab2 f282 	clz	r2, r2
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	f002 021f 	and.w	r2, r2, #31
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f202 	lsl.w	r2, r1, r2
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1a0      	bne.n	80014fa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	4a76      	ldr	r2, [pc, #472]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 81c2 	beq.w	800195c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b71      	ldr	r3, [pc, #452]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	f000 819c 	beq.w	800191e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	f040 8114 	bne.w	800181a <HAL_RCC_OscConfig+0xcbe>
 80015f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800160a:	601a      	str	r2, [r3, #0]
  return result;
 800160c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001610:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800161c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	461a      	mov	r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff f818 	bl	800065c <HAL_GetTick>
 800162c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e009      	b.n	8001646 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff f813 	bl	800065c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e18b      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
 8001646:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800164a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f2a3 	rbit	r2, r3
 800165a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800165e:	601a      	str	r2, [r3, #0]
  return result;
 8001660:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001664:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_RCC_OscConfig+0xb24>
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	e01b      	b.n	80016b8 <HAL_RCC_OscConfig+0xb5c>
 8001680:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800169e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016c0:	6011      	str	r1, [r2, #0]
 80016c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	fa92 f1a2 	rbit	r1, r2
 80016cc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016d0:	6011      	str	r1, [r2, #0]
  return result;
 80016d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d19e      	bne.n	8001632 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	430b      	orrs	r3, r1
 800170a:	4925      	ldr	r1, [pc, #148]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	fa93 f2a3 	rbit	r2, r3
 8001724:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001728:	601a      	str	r2, [r3, #0]
  return result;
 800172a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800172e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800173a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	461a      	mov	r2, r3
 8001742:	2301      	movs	r3, #1
 8001744:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7fe ff89 	bl	800065c <HAL_GetTick>
 800174a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174e:	e009      	b.n	8001764 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001750:	f7fe ff84 	bl	800065c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0fc      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
 8001764:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f2a3 	rbit	r2, r3
 8001778:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800177c:	601a      	str	r2, [r3, #0]
  return result;
 800177e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001782:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0xc48>
 8001798:	4b01      	ldr	r3, [pc, #4]	; (80017a0 <HAL_RCC_OscConfig+0xc44>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e01e      	b.n	80017dc <HAL_RCC_OscConfig+0xc80>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0xe0c>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017e4:	6011      	str	r1, [r2, #0]
 80017e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	fa92 f1a2 	rbit	r1, r2
 80017f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017f4:	6011      	str	r1, [r2, #0]
  return result;
 80017f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fab2 f282 	clz	r2, r2
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f042 0220 	orr.w	r2, r2, #32
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f002 021f 	and.w	r2, r2, #31
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d09b      	beq.n	8001750 <HAL_RCC_OscConfig+0xbf4>
 8001818:	e0a0      	b.n	800195c <HAL_RCC_OscConfig+0xe00>
 800181a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	601a      	str	r2, [r3, #0]
  return result;
 8001834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001838:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001844:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	2300      	movs	r3, #0
 800184e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7fe ff04 	bl	800065c <HAL_GetTick>
 8001854:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7fe feff 	bl	800065c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e077      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
 800186e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fa93 f2a3 	rbit	r2, r3
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	601a      	str	r2, [r3, #0]
  return result;
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d102      	bne.n	80018a8 <HAL_RCC_OscConfig+0xd4c>
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_RCC_OscConfig+0xe0c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	e01b      	b.n	80018e0 <HAL_RCC_OscConfig+0xd84>
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fa93 f2a3 	rbit	r2, r3
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_OscConfig+0xe0c>)
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f107 0210 	add.w	r2, r7, #16
 80018e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018e8:	6011      	str	r1, [r2, #0]
 80018ea:	f107 0210 	add.w	r2, r7, #16
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	fa92 f1a2 	rbit	r1, r2
 80018f4:	f107 020c 	add.w	r2, r7, #12
 80018f8:	6011      	str	r1, [r2, #0]
  return result;
 80018fa:	f107 020c 	add.w	r2, r7, #12
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fab2 f282 	clz	r2, r2
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f002 021f 	and.w	r2, r2, #31
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d19e      	bne.n	800185a <HAL_RCC_OscConfig+0xcfe>
 800191c:	e01e      	b.n	800195c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e018      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_RCC_OscConfig+0xe0c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001934:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	429a      	cmp	r2, r3
 8001944:	d108      	bne.n	8001958 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001946:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800194a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b09e      	sub	sp, #120	; 0x78
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e162      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b90      	ldr	r3, [pc, #576]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d910      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b8d      	ldr	r3, [pc, #564]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	498b      	ldr	r1, [pc, #556]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e14a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b82      	ldr	r3, [pc, #520]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	497f      	ldr	r1, [pc, #508]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80dc 	beq.w	8001b98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d13c      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xf6>
 80019e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xa6>
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	e00f      	b.n	8001a32 <HAL_RCC_ClockConfig+0xc6>
 8001a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a24:	663b      	str	r3, [r7, #96]	; 0x60
 8001a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a36:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a3a:	fa92 f2a2 	rbit	r2, r2
 8001a3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a42:	fab2 f282 	clz	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f042 0220 	orr.w	r2, r2, #32
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f002 021f 	and.w	r2, r2, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d17b      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0f3      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d13c      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x178>
 8001a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d102      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x128>
 8001a8e:	4b4f      	ldr	r3, [pc, #316]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x148>
 8001a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8001aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab0:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001abc:	fa92 f2a2 	rbit	r2, r2
 8001ac0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d13a      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b2      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2de>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	095b      	lsrs	r3, r3, #5
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d102      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a0>
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e00d      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1bc>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
 8001b18:	2302      	movs	r3, #2
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2202      	movs	r2, #2
 8001b2a:	61ba      	str	r2, [r7, #24]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	fa92 f2a2 	rbit	r2, r2
 8001b32:	617a      	str	r2, [r7, #20]
  return result;
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f042 0220 	orr.w	r2, r2, #32
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f002 021f 	and.w	r2, r2, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e079      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	491a      	ldr	r1, [pc, #104]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b68:	f7fe fd78 	bl	800065c <HAL_GetTick>
 8001b6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7fe fd74 	bl	800065c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e061      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d214      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4906      	ldr	r1, [pc, #24]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_RCC_ClockConfig+0x25c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e040      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2de>
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_ClockConfig+0x2e8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	491a      	ldr	r1, [pc, #104]	; (8001c54 <HAL_RCC_ClockConfig+0x2e8>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x2e8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4912      	ldr	r1, [pc, #72]	; (8001c54 <HAL_RCC_ClockConfig+0x2e8>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c0e:	f000 f829 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c12:	4601      	mov	r1, r0
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_ClockConfig+0x2e8>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1c:	22f0      	movs	r2, #240	; 0xf0
 8001c1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	fa92 f2a2 	rbit	r2, r2
 8001c26:	60fa      	str	r2, [r7, #12]
  return result;
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	40d3      	lsrs	r3, r2
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x2ec>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	fa21 f303 	lsr.w	r3, r1, r3
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_RCC_ClockConfig+0x2f0>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_RCC_ClockConfig+0x2f4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc2c 	bl	80004a0 <HAL_InitTick>
  
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3778      	adds	r7, #120	; 0x78
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08003308 	.word	0x08003308
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b08b      	sub	sp, #44	; 0x2c
 8001c68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x36>
 8001c92:	e03c      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c96:	623b      	str	r3, [r7, #32]
      break;
 8001c98:	e03c      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ca0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ca4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	607a      	str	r2, [r7, #4]
  return result;
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	40d3      	lsrs	r3, r2
 8001cb8:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	fa92 f2a2 	rbit	r2, r2
 8001cd0:	60fa      	str	r2, [r7, #12]
  return result;
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	40d3      	lsrs	r3, r2
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	e004      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	623b      	str	r3, [r7, #32]
      break;
 8001d0c:	e002      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d10:	623b      	str	r3, [r7, #32]
      break;
 8001d12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d14:	6a3b      	ldr	r3, [r7, #32]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	372c      	adds	r7, #44	; 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	08003320 	.word	0x08003320
 8001d30:	08003330 	.word	0x08003330
 8001d34:	003d0900 	.word	0x003d0900

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d56:	f7ff ffef 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	fa92 f2a2 	rbit	r2, r2
 8001d70:	603a      	str	r2, [r7, #0]
  return result;
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	fab2 f282 	clz	r2, r2
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	40d3      	lsrs	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08003318 	.word	0x08003318

08001d94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	220f      	movs	r2, #15
 8001da2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_GetClockConfig+0x5c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_RCC_GetClockConfig+0x60>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0207 	and.w	r2, r3, #7
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	601a      	str	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e049      	b.n	8001e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f841 	bl	8001ea6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f000 f9f2 	bl	8002220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e04a      	b.n	8001f6a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d018      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efe:	d013      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_TIM_Base_Start_IT+0xc0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d115      	bne.n	8001f54 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d015      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0xaa>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d011      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f52:	e008      	b.n	8001f66 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e000      	b.n	8001f68 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40000800 	.word	0x40000800
 8001f84:	40013400 	.word	0x40013400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	00010007 	.word	0x00010007

08001f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0202 	mvn.w	r2, #2
 8001fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f905 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8f7 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f908 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0204 	mvn.w	r2, #4
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8db 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8cd 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f8de 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b08      	cmp	r3, #8
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b08      	cmp	r3, #8
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0208 	mvn.w	r2, #8
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8b1 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8a3 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8b4 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0210 	mvn.w	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2208      	movs	r2, #8
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f887 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f879 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f88a 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0201 	mvn.w	r2, #1
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe f98a 	bl	8000428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f90a 	bl	8002354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800214e:	d10e      	bne.n	800216e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d107      	bne.n	800216e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f8fd 	bl	8002368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d10e      	bne.n	800219a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b40      	cmp	r3, #64	; 0x40
 8002188:	d107      	bne.n	800219a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f838 	bl	800220a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d10e      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d107      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0220 	mvn.w	r2, #32
 80021be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f8bd 	bl	8002340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3c      	ldr	r2, [pc, #240]	; (8002324 <TIM_Base_SetConfig+0x104>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00f      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d00b      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a39      	ldr	r2, [pc, #228]	; (8002328 <TIM_Base_SetConfig+0x108>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a38      	ldr	r2, [pc, #224]	; (800232c <TIM_Base_SetConfig+0x10c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a37      	ldr	r2, [pc, #220]	; (8002330 <TIM_Base_SetConfig+0x110>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d108      	bne.n	800226a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <TIM_Base_SetConfig+0x104>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01b      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d017      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <TIM_Base_SetConfig+0x108>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <TIM_Base_SetConfig+0x10c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <TIM_Base_SetConfig+0x110>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00b      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a27      	ldr	r2, [pc, #156]	; (8002334 <TIM_Base_SetConfig+0x114>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <TIM_Base_SetConfig+0x118>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <TIM_Base_SetConfig+0x11c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d108      	bne.n	80022bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a10      	ldr	r2, [pc, #64]	; (8002324 <TIM_Base_SetConfig+0x104>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00f      	beq.n	8002308 <TIM_Base_SetConfig+0xe8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a11      	ldr	r2, [pc, #68]	; (8002330 <TIM_Base_SetConfig+0x110>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00b      	beq.n	8002308 <TIM_Base_SetConfig+0xe8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a10      	ldr	r2, [pc, #64]	; (8002334 <TIM_Base_SetConfig+0x114>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d007      	beq.n	8002308 <TIM_Base_SetConfig+0xe8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <TIM_Base_SetConfig+0x118>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d003      	beq.n	8002308 <TIM_Base_SetConfig+0xe8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <TIM_Base_SetConfig+0x11c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d103      	bne.n	8002310 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	615a      	str	r2, [r3, #20]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800
 8002330:	40013400 	.word	0x40013400
 8002334:	40014000 	.word	0x40014000
 8002338:	40014400 	.word	0x40014400
 800233c:	40014800 	.word	0x40014800

08002340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 0208 	add.w	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002394:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f103 0208 	add.w	r2, r3, #8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0208 	add.w	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b08c      	sub	sp, #48	; 0x30
 80023da:	af04      	add	r7, sp, #16
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd46 	bl	8002e7c <pvPortMalloc>
 80023f0:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023f8:	2058      	movs	r0, #88	; 0x58
 80023fa:	f000 fd3f 	bl	8002e7c <pvPortMalloc>
 80023fe:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002406:	2258      	movs	r2, #88	; 0x58
 8002408:	2100      	movs	r1, #0
 800240a:	69f8      	ldr	r0, [r7, #28]
 800240c:	f000 ff58 	bl	80032c0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
 8002416:	e005      	b.n	8002424 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002418:	6978      	ldr	r0, [r7, #20]
 800241a:	f000 fe0f 	bl	800303c <vPortFree>
 800241e:	e001      	b.n	8002424 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d013      	beq.n	8002452 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	2300      	movs	r3, #0
 800242e:	9303      	str	r3, [sp, #12]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f80e 	bl	8002462 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002446:	69f8      	ldr	r0, [r7, #28]
 8002448:	f000 f89a 	bl	8002580 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800244c:	2301      	movs	r3, #1
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e002      	b.n	8002458 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002456:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002458:	69bb      	ldr	r3, [r7, #24]
    }
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b088      	sub	sp, #32
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	21a5      	movs	r1, #165	; 0xa5
 800247c:	f000 ff20 	bl	80032c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800248a:	3b01      	subs	r3, #1
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f023 0307 	bic.w	r3, r3, #7
 8002498:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <prvInitialiseNewTask+0x58>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	617b      	str	r3, [r7, #20]
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01e      	beq.n	80024fe <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	e012      	b.n	80024ec <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	7819      	ldrb	r1, [r3, #0]
 80024ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	3334      	adds	r3, #52	; 0x34
 80024d6:	460a      	mov	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d9e9      	bls.n	80024c6 <prvInitialiseNewTask+0x64>
 80024f2:	e000      	b.n	80024f6 <prvInitialiseNewTask+0x94>
            {
                break;
 80024f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	2b04      	cmp	r3, #4
 8002502:	d90a      	bls.n	800251a <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	613b      	str	r3, [r7, #16]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	2b04      	cmp	r3, #4
 800251e:	d901      	bls.n	8002524 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002520:	2304      	movs	r3, #4
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800252e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	3304      	adds	r3, #4
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff41 	bl	80023bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	3318      	adds	r3, #24
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff3c 	bl	80023bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002548:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	f1c3 0205 	rsb	r2, r3, #5
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	69b8      	ldr	r0, [r7, #24]
 8002560:	f000 fb7c 	bl	8002c5c <pxPortInitialiseStack>
 8002564:	4602      	mov	r2, r0
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002588:	f000 fbd6 	bl	8002d38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <prvAddNewTaskToReadyList+0x110>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <prvAddNewTaskToReadyList+0x110>)
 8002594:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <prvAddNewTaskToReadyList+0x114>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800259e:	4a3d      	ldr	r2, [pc, #244]	; (8002694 <prvAddNewTaskToReadyList+0x114>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <prvAddNewTaskToReadyList+0x110>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d110      	bne.n	80025ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025ac:	f000 fafa 	bl	8002ba4 <prvInitialiseTaskLists>
 80025b0:	e00d      	b.n	80025ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <prvAddNewTaskToReadyList+0x118>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <prvAddNewTaskToReadyList+0x114>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d802      	bhi.n	80025ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025c8:	4a32      	ldr	r2, [pc, #200]	; (8002694 <prvAddNewTaskToReadyList+0x114>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <prvAddNewTaskToReadyList+0x11c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <prvAddNewTaskToReadyList+0x11c>)
 80025d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <prvAddNewTaskToReadyList+0x11c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	2201      	movs	r2, #1
 80025e6:	409a      	lsls	r2, r3
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <prvAddNewTaskToReadyList+0x120>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	4a2c      	ldr	r2, [pc, #176]	; (80026a0 <prvAddNewTaskToReadyList+0x120>)
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f6:	492b      	ldr	r1, [pc, #172]	; (80026a4 <prvAddNewTaskToReadyList+0x124>)
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	3204      	adds	r2, #4
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	1d1a      	adds	r2, r3, #4
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <prvAddNewTaskToReadyList+0x124>)
 8002636:	441a      	add	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	615a      	str	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	4918      	ldr	r1, [pc, #96]	; (80026a4 <prvAddNewTaskToReadyList+0x124>)
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1c59      	adds	r1, r3, #1
 8002650:	4814      	ldr	r0, [pc, #80]	; (80026a4 <prvAddNewTaskToReadyList+0x124>)
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4403      	add	r3, r0
 800265c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800265e:	f000 fb9b 	bl	8002d98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <prvAddNewTaskToReadyList+0x118>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00e      	beq.n	8002688 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <prvAddNewTaskToReadyList+0x114>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	429a      	cmp	r2, r3
 8002676:	d207      	bcs.n	8002688 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <prvAddNewTaskToReadyList+0x128>)
 800267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000100 	.word	0x20000100
 8002694:	2000002c 	.word	0x2000002c
 8002698:	2000010c 	.word	0x2000010c
 800269c:	2000011c 	.word	0x2000011c
 80026a0:	20000108 	.word	0x20000108
 80026a4:	20000030 	.word	0x20000030
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <vTaskSuspendAll+0x18>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <vTaskSuspendAll+0x18>)
 80026b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20000124 	.word	0x20000124

080026c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80026d6:	4b71      	ldr	r3, [pc, #452]	; (800289c <xTaskResumeAll+0x1d4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	607b      	str	r3, [r7, #4]
    }
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026f4:	f000 fb20 	bl	8002d38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <xTaskResumeAll+0x1d4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	4a67      	ldr	r2, [pc, #412]	; (800289c <xTaskResumeAll+0x1d4>)
 8002700:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002702:	4b66      	ldr	r3, [pc, #408]	; (800289c <xTaskResumeAll+0x1d4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 80c0 	bne.w	800288c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800270c:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <xTaskResumeAll+0x1d8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80bb 	beq.w	800288c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002716:	e08a      	b.n	800282e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002718:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <xTaskResumeAll+0x1dc>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	6a12      	ldr	r2, [r2, #32]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	69d2      	ldr	r2, [r2, #28]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3318      	adds	r3, #24
 8002742:	429a      	cmp	r2, r3
 8002744:	d103      	bne.n	800274e <xTaskResumeAll+0x86>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2200      	movs	r2, #0
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	68d2      	ldr	r2, [r2, #12]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3304      	adds	r3, #4
 8002780:	429a      	cmp	r2, r3
 8002782:	d103      	bne.n	800278c <xTaskResumeAll+0xc4>
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1e5a      	subs	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	2201      	movs	r2, #1
 80027a2:	409a      	lsls	r2, r3
 80027a4:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <xTaskResumeAll+0x1e0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	4a3f      	ldr	r2, [pc, #252]	; (80028a8 <xTaskResumeAll+0x1e0>)
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b2:	493e      	ldr	r1, [pc, #248]	; (80028ac <xTaskResumeAll+0x1e4>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3304      	adds	r3, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	3204      	adds	r2, #4
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	1d1a      	adds	r2, r3, #4
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4a2e      	ldr	r2, [pc, #184]	; (80028ac <xTaskResumeAll+0x1e4>)
 80027f2:	441a      	add	r2, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	615a      	str	r2, [r3, #20]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fc:	492b      	ldr	r1, [pc, #172]	; (80028ac <xTaskResumeAll+0x1e4>)
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1c59      	adds	r1, r3, #1
 800280c:	4827      	ldr	r0, [pc, #156]	; (80028ac <xTaskResumeAll+0x1e4>)
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4403      	add	r3, r0
 8002818:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <xTaskResumeAll+0x1e8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <xTaskResumeAll+0x1ec>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <xTaskResumeAll+0x1dc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f af70 	bne.w	8002718 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800283e:	f000 f9f1 	bl	8002c24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <xTaskResumeAll+0x1f0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800284e:	f000 f837 	bl	80028c0 <xTaskIncrementTick>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <xTaskResumeAll+0x1ec>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3b01      	subs	r3, #1
 8002862:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f1      	bne.n	800284e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <xTaskResumeAll+0x1f0>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <xTaskResumeAll+0x1ec>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002878:	2301      	movs	r3, #1
 800287a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <xTaskResumeAll+0x1f4>)
 800287e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800288c:	f000 fa84 	bl	8002d98 <vPortExitCritical>

    return xAlreadyYielded;
 8002890:	69bb      	ldr	r3, [r7, #24]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000124 	.word	0x20000124
 80028a0:	20000100 	.word	0x20000100
 80028a4:	200000c4 	.word	0x200000c4
 80028a8:	20000108 	.word	0x20000108
 80028ac:	20000030 	.word	0x20000030
 80028b0:	2000002c 	.word	0x2000002c
 80028b4:	20000114 	.word	0x20000114
 80028b8:	20000110 	.word	0x20000110
 80028bc:	e000ed04 	.word	0xe000ed04

080028c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ca:	4b7d      	ldr	r3, [pc, #500]	; (8002ac0 <xTaskIncrementTick+0x200>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 80ec 	bne.w	8002aac <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028d4:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <xTaskIncrementTick+0x204>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028dc:	4a79      	ldr	r2, [pc, #484]	; (8002ac4 <xTaskIncrementTick+0x204>)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d120      	bne.n	800292a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028e8:	4b77      	ldr	r3, [pc, #476]	; (8002ac8 <xTaskIncrementTick+0x208>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <xTaskIncrementTick+0x48>
        __asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	607b      	str	r3, [r7, #4]
    }
 8002904:	bf00      	nop
 8002906:	e7fe      	b.n	8002906 <xTaskIncrementTick+0x46>
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <xTaskIncrementTick+0x208>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <xTaskIncrementTick+0x20c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <xTaskIncrementTick+0x208>)
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4a6d      	ldr	r2, [pc, #436]	; (8002acc <xTaskIncrementTick+0x20c>)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b6c      	ldr	r3, [pc, #432]	; (8002ad0 <xTaskIncrementTick+0x210>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a6b      	ldr	r2, [pc, #428]	; (8002ad0 <xTaskIncrementTick+0x210>)
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	f000 f97d 	bl	8002c24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800292a:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <xTaskIncrementTick+0x214>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	429a      	cmp	r2, r3
 8002932:	f0c0 80a6 	bcc.w	8002a82 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002936:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <xTaskIncrementTick+0x208>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002940:	4b64      	ldr	r3, [pc, #400]	; (8002ad4 <xTaskIncrementTick+0x214>)
 8002942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002946:	601a      	str	r2, [r3, #0]
                    break;
 8002948:	e09b      	b.n	8002a82 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800294a:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <xTaskIncrementTick+0x208>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800295a:	6a3a      	ldr	r2, [r7, #32]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	429a      	cmp	r2, r3
 8002960:	d203      	bcs.n	800296a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002962:	4a5c      	ldr	r2, [pc, #368]	; (8002ad4 <xTaskIncrementTick+0x214>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002968:	e08b      	b.n	8002a82 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	68d2      	ldr	r2, [r2, #12]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	3304      	adds	r3, #4
 800298c:	429a      	cmp	r2, r3
 800298e:	d103      	bne.n	8002998 <xTaskIncrementTick+0xd8>
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01e      	beq.n	80029ee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	6a12      	ldr	r2, [r2, #32]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	69d2      	ldr	r2, [r2, #28]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3318      	adds	r3, #24
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d103      	bne.n	80029de <xTaskIncrementTick+0x11e>
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	2201      	movs	r2, #1
 80029f4:	409a      	lsls	r2, r3
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <xTaskIncrementTick+0x218>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	4a36      	ldr	r2, [pc, #216]	; (8002ad8 <xTaskIncrementTick+0x218>)
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	4935      	ldr	r1, [pc, #212]	; (8002adc <xTaskIncrementTick+0x21c>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3304      	adds	r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	3204      	adds	r2, #4
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1d1a      	adds	r2, r3, #4
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4a26      	ldr	r2, [pc, #152]	; (8002adc <xTaskIncrementTick+0x21c>)
 8002a44:	441a      	add	r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	615a      	str	r2, [r3, #20]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4923      	ldr	r1, [pc, #140]	; (8002adc <xTaskIncrementTick+0x21c>)
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	481f      	ldr	r0, [pc, #124]	; (8002adc <xTaskIncrementTick+0x21c>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4403      	add	r3, r0
 8002a6a:	6019      	str	r1, [r3, #0]
                    {
                        /* Preemption is on, but a context switch should
                         * only be performed if the unblocked task has a
                         * priority that is equal to or higher than the
                         * currently executing task. */
                        if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <xTaskIncrementTick+0x220>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	429a      	cmp	r2, r3
 8002a78:	f4ff af5d 	bcc.w	8002936 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a80:	e759      	b.n	8002936 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <xTaskIncrementTick+0x220>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a88:	4914      	ldr	r1, [pc, #80]	; (8002adc <xTaskIncrementTick+0x21c>)
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d901      	bls.n	8002a9e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <xTaskIncrementTick+0x224>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	e004      	b.n	8002ab6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <xTaskIncrementTick+0x228>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <xTaskIncrementTick+0x228>)
 8002ab4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3728      	adds	r7, #40	; 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000124 	.word	0x20000124
 8002ac4:	20000104 	.word	0x20000104
 8002ac8:	200000bc 	.word	0x200000bc
 8002acc:	200000c0 	.word	0x200000c0
 8002ad0:	20000118 	.word	0x20000118
 8002ad4:	20000120 	.word	0x20000120
 8002ad8:	20000108 	.word	0x20000108
 8002adc:	20000030 	.word	0x20000030
 8002ae0:	2000002c 	.word	0x2000002c
 8002ae4:	20000114 	.word	0x20000114
 8002ae8:	20000110 	.word	0x20000110

08002aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <vTaskSwitchContext+0xa4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <vTaskSwitchContext+0xa8>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
             * for additional information. */
            _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b00:	e03f      	b.n	8002b82 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <vTaskSwitchContext+0xa8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <vTaskSwitchContext+0xac>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b16:	7afb      	ldrb	r3, [r7, #11]
 8002b18:	f1c3 031f 	rsb	r3, r3, #31
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	491f      	ldr	r1, [pc, #124]	; (8002b9c <vTaskSwitchContext+0xb0>)
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	607b      	str	r3, [r7, #4]
    }
 8002b44:	bf00      	nop
 8002b46:	e7fe      	b.n	8002b46 <vTaskSwitchContext+0x5a>
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <vTaskSwitchContext+0xb0>)
 8002b54:	4413      	add	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	3308      	adds	r3, #8
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d104      	bne.n	8002b78 <vTaskSwitchContext+0x8c>
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <vTaskSwitchContext+0xb4>)
 8002b80:	6013      	str	r3, [r2, #0]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000124 	.word	0x20000124
 8002b94:	20000114 	.word	0x20000114
 8002b98:	20000108 	.word	0x20000108
 8002b9c:	20000030 	.word	0x20000030
 8002ba0:	2000002c 	.word	0x2000002c

08002ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	e00c      	b.n	8002bca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <prvInitialiseTaskLists+0x60>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fbdc 	bl	800237c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d9ef      	bls.n	8002bb0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <prvInitialiseTaskLists+0x64>)
 8002bd2:	f7ff fbd3 	bl	800237c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <prvInitialiseTaskLists+0x68>)
 8002bd8:	f7ff fbd0 	bl	800237c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <prvInitialiseTaskLists+0x6c>)
 8002bde:	f7ff fbcd 	bl	800237c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002be2:	480c      	ldr	r0, [pc, #48]	; (8002c14 <prvInitialiseTaskLists+0x70>)
 8002be4:	f7ff fbca 	bl	800237c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002be8:	480b      	ldr	r0, [pc, #44]	; (8002c18 <prvInitialiseTaskLists+0x74>)
 8002bea:	f7ff fbc7 	bl	800237c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <prvInitialiseTaskLists+0x78>)
 8002bf0:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <prvInitialiseTaskLists+0x64>)
 8002bf2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <prvInitialiseTaskLists+0x7c>)
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <prvInitialiseTaskLists+0x68>)
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000030 	.word	0x20000030
 8002c08:	20000094 	.word	0x20000094
 8002c0c:	200000a8 	.word	0x200000a8
 8002c10:	200000c4 	.word	0x200000c4
 8002c14:	200000d8 	.word	0x200000d8
 8002c18:	200000ec 	.word	0x200000ec
 8002c1c:	200000bc 	.word	0x200000bc
 8002c20:	200000c0 	.word	0x200000c0

08002c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <prvResetNextTaskUnblockTime+0x30>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <prvResetNextTaskUnblockTime+0x34>)
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c3a:	e005      	b.n	8002c48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <prvResetNextTaskUnblockTime+0x30>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <prvResetNextTaskUnblockTime+0x34>)
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	200000bc 	.word	0x200000bc
 8002c58:	20000120 	.word	0x20000120

08002c5c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b04      	subs	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c8c:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <pxPortInitialiseStack+0x58>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3b14      	subs	r3, #20
 8002c96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b20      	subs	r3, #32
 8002ca2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	08002cb9 	.word	0x08002cb9

08002cb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <prvTaskExitError+0x54>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cca:	d00a      	beq.n	8002ce2 <prvTaskExitError+0x2a>
        __asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60fb      	str	r3, [r7, #12]
    }
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <prvTaskExitError+0x28>
        __asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	60bb      	str	r3, [r7, #8]
    }
 8002cf4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002cf6:	bf00      	nop
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0fc      	beq.n	8002cf8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	2000000c 	.word	0x2000000c

08002d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <pxCurrentTCBConst2>)
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	6808      	ldr	r0, [r1, #0]
 8002d16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d1a:	f380 8809 	msr	PSP, r0
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f380 8811 	msr	BASEPRI, r0
 8002d2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002d2e:	4770      	bx	lr

08002d30 <pxCurrentTCBConst2>:
 8002d30:	2000002c 	.word	0x2000002c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop

08002d38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	607b      	str	r3, [r7, #4]
    }
 8002d50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <vPortEnterCritical+0x58>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <vPortEnterCritical+0x58>)
 8002d5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <vPortEnterCritical+0x58>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d10f      	bne.n	8002d84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <vPortEnterCritical+0x5c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	603b      	str	r3, [r7, #0]
    }
 8002d80:	bf00      	nop
 8002d82:	e7fe      	b.n	8002d82 <vPortEnterCritical+0x4a>
    }
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	2000000c 	.word	0x2000000c
 8002d94:	e000ed04 	.word	0xe000ed04

08002d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <vPortExitCritical+0x50>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <vPortExitCritical+0x24>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	607b      	str	r3, [r7, #4]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <vPortExitCritical+0x50>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <vPortExitCritical+0x50>)
 8002dc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <vPortExitCritical+0x50>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <vPortExitCritical+0x42>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002dd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2000000c 	.word	0x2000000c
 8002dec:	00000000 	.word	0x00000000

08002df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002df0:	f3ef 8009 	mrs	r0, PSP
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <pxCurrentTCBConst>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e00:	6010      	str	r0, [r2, #0]
 8002e02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002e06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e0a:	f380 8811 	msr	BASEPRI, r0
 8002e0e:	f7ff fe6d 	bl	8002aec <vTaskSwitchContext>
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f380 8811 	msr	BASEPRI, r0
 8002e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e26:	f380 8809 	msr	PSP, r0
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	4770      	bx	lr

08002e30 <pxCurrentTCBConst>:
 8002e30:	2000002c 	.word	0x2000002c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop

08002e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	607b      	str	r3, [r7, #4]
    }
 8002e50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e52:	f7ff fd35 	bl	80028c0 <xTaskIncrementTick>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <SysTick_Handler+0x40>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	2300      	movs	r3, #0
 8002e66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f383 8811 	msr	BASEPRI, r3
    }
 8002e6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002e88:	f7ff fc10 	bl	80026ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e8c:	4b65      	ldr	r3, [pc, #404]	; (8003024 <pvPortMalloc+0x1a8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e94:	f000 f934 	bl	8003100 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e98:	4b63      	ldr	r3, [pc, #396]	; (8003028 <pvPortMalloc+0x1ac>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 80a7 	bne.w	8002ff4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02d      	beq.n	8002f08 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002eac:	2208      	movs	r2, #8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d227      	bcs.n	8002f08 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002eb8:	2208      	movs	r2, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d021      	beq.n	8002f0e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f023 0307 	bic.w	r3, r3, #7
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d214      	bcs.n	8002f02 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	3308      	adds	r3, #8
 8002ee0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <pvPortMalloc+0x92>
        __asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	617b      	str	r3, [r7, #20]
    }
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f06:	e002      	b.n	8002f0e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	e000      	b.n	8002f10 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f0e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06e      	beq.n	8002ff4 <pvPortMalloc+0x178>
 8002f16:	4b45      	ldr	r3, [pc, #276]	; (800302c <pvPortMalloc+0x1b0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d869      	bhi.n	8002ff4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f20:	4b43      	ldr	r3, [pc, #268]	; (8003030 <pvPortMalloc+0x1b4>)
 8002f22:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <pvPortMalloc+0x1b4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f2a:	e004      	b.n	8002f36 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d903      	bls.n	8002f48 <pvPortMalloc+0xcc>
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f1      	bne.n	8002f2c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f48:	4b36      	ldr	r3, [pc, #216]	; (8003024 <pvPortMalloc+0x1a8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d050      	beq.n	8002ff4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2208      	movs	r2, #8
 8002f58:	4413      	add	r3, r2
 8002f5a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d91f      	bls.n	8002fb4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <pvPortMalloc+0x120>
        __asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	613b      	str	r3, [r7, #16]
    }
 8002f98:	bf00      	nop
 8002f9a:	e7fe      	b.n	8002f9a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1ad2      	subs	r2, r2, r3
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fae:	69b8      	ldr	r0, [r7, #24]
 8002fb0:	f000 f908 	bl	80031c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <pvPortMalloc+0x1b0>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <pvPortMalloc+0x1b0>)
 8002fc0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <pvPortMalloc+0x1b0>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <pvPortMalloc+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d203      	bcs.n	8002fd6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <pvPortMalloc+0x1b0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <pvPortMalloc+0x1b8>)
 8002fd4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <pvPortMalloc+0x1ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <pvPortMalloc+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a11      	ldr	r2, [pc, #68]	; (8003038 <pvPortMalloc+0x1bc>)
 8002ff2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002ff4:	f7ff fb68 	bl	80026c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <pvPortMalloc+0x19c>
        __asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	60fb      	str	r3, [r7, #12]
    }
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <pvPortMalloc+0x19a>
    return pvReturn;
 8003018:	69fb      	ldr	r3, [r7, #28]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20005130 	.word	0x20005130
 8003028:	20005144 	.word	0x20005144
 800302c:	20005134 	.word	0x20005134
 8003030:	20005128 	.word	0x20005128
 8003034:	20005138 	.word	0x20005138
 8003038:	2000513c 	.word	0x2000513c

0800303c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d04d      	beq.n	80030ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800304e:	2308      	movs	r3, #8
 8003050:	425b      	negs	r3, r3
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4413      	add	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <vPortFree+0xb8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <vPortFree+0x44>
        __asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	60fb      	str	r3, [r7, #12]
    }
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <vPortFree+0x62>
        __asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	60bb      	str	r3, [r7, #8]
    }
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <vPortFree+0xb8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01e      	beq.n	80030ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11a      	bne.n	80030ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <vPortFree+0xb8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	43db      	mvns	r3, r3
 80030be:	401a      	ands	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80030c4:	f7ff faf2 	bl	80026ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <vPortFree+0xbc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <vPortFree+0xbc>)
 80030d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030d6:	6938      	ldr	r0, [r7, #16]
 80030d8:	f000 f874 	bl	80031c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <vPortFree+0xc0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a06      	ldr	r2, [pc, #24]	; (80030fc <vPortFree+0xc0>)
 80030e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030e6:	f7ff faef 	bl	80026c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20005144 	.word	0x20005144
 80030f8:	20005134 	.word	0x20005134
 80030fc:	20005140 	.word	0x20005140

08003100 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003106:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800310a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <prvHeapInit+0xac>)
 800310e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3307      	adds	r3, #7
 800311e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0307 	bic.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <prvHeapInit+0xac>)
 8003130:	4413      	add	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <prvHeapInit+0xb0>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <prvHeapInit+0xb0>)
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800314c:	2208      	movs	r2, #8
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <prvHeapInit+0xb4>)
 8003160:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <prvHeapInit+0xb4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <prvHeapInit+0xb4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	1ad2      	subs	r2, r2, r3
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <prvHeapInit+0xb4>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <prvHeapInit+0xb8>)
 800318e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a09      	ldr	r2, [pc, #36]	; (80031bc <prvHeapInit+0xbc>)
 8003196:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <prvHeapInit+0xc0>)
 800319a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800319e:	601a      	str	r2, [r3, #0]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	20000128 	.word	0x20000128
 80031b0:	20005128 	.word	0x20005128
 80031b4:	20005130 	.word	0x20005130
 80031b8:	20005138 	.word	0x20005138
 80031bc:	20005134 	.word	0x20005134
 80031c0:	20005144 	.word	0x20005144

080031c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031cc:	4b28      	ldr	r3, [pc, #160]	; (8003270 <prvInsertBlockIntoFreeList+0xac>)
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	e002      	b.n	80031d8 <prvInsertBlockIntoFreeList+0x14>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d8f7      	bhi.n	80031d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	4413      	add	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d108      	bne.n	8003206 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	441a      	add	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d118      	bne.n	800324c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <prvInsertBlockIntoFreeList+0xb0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d00d      	beq.n	8003242 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e008      	b.n	8003254 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <prvInsertBlockIntoFreeList+0xb0>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e003      	b.n	8003254 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	d002      	beq.n	8003262 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20005128 	.word	0x20005128
 8003274:	20005130 	.word	0x20005130

08003278 <__libc_init_array>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	4d0d      	ldr	r5, [pc, #52]	; (80032b0 <__libc_init_array+0x38>)
 800327c:	4c0d      	ldr	r4, [pc, #52]	; (80032b4 <__libc_init_array+0x3c>)
 800327e:	1b64      	subs	r4, r4, r5
 8003280:	10a4      	asrs	r4, r4, #2
 8003282:	2600      	movs	r6, #0
 8003284:	42a6      	cmp	r6, r4
 8003286:	d109      	bne.n	800329c <__libc_init_array+0x24>
 8003288:	4d0b      	ldr	r5, [pc, #44]	; (80032b8 <__libc_init_array+0x40>)
 800328a:	4c0c      	ldr	r4, [pc, #48]	; (80032bc <__libc_init_array+0x44>)
 800328c:	f000 f820 	bl	80032d0 <_init>
 8003290:	1b64      	subs	r4, r4, r5
 8003292:	10a4      	asrs	r4, r4, #2
 8003294:	2600      	movs	r6, #0
 8003296:	42a6      	cmp	r6, r4
 8003298:	d105      	bne.n	80032a6 <__libc_init_array+0x2e>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a0:	4798      	blx	r3
 80032a2:	3601      	adds	r6, #1
 80032a4:	e7ee      	b.n	8003284 <__libc_init_array+0xc>
 80032a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032aa:	4798      	blx	r3
 80032ac:	3601      	adds	r6, #1
 80032ae:	e7f2      	b.n	8003296 <__libc_init_array+0x1e>
 80032b0:	08003340 	.word	0x08003340
 80032b4:	08003340 	.word	0x08003340
 80032b8:	08003340 	.word	0x08003340
 80032bc:	08003344 	.word	0x08003344

080032c0 <memset>:
 80032c0:	4402      	add	r2, r0
 80032c2:	4603      	mov	r3, r0
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d100      	bne.n	80032ca <memset+0xa>
 80032c8:	4770      	bx	lr
 80032ca:	f803 1b01 	strb.w	r1, [r3], #1
 80032ce:	e7f9      	b.n	80032c4 <memset+0x4>

080032d0 <_init>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr

080032dc <_fini>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr
