
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf11  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c37  00000000  00000000  0002cf4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0002eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af8  00000000  00000000  0002f758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbf1  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d36a  00000000  00000000  0004ce41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8b1f  00000000  00000000  0005a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00112cca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030d4  00000000  00000000  00112d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002754 	.word	0x08002754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08002754 	.word	0x08002754

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 f9ea 	bl	80005ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f803 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f842 	bl	8000264 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x10>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b090      	sub	sp, #64	; 0x40
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 faa7 	bl	8002744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	2302      	movs	r3, #2
 8000206:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020c:	2310      	movs	r3, #16
 800020e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000210:	2302      	movs	r3, #2
 8000212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000214:	2300      	movs	r3, #0
 8000216:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000218:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800021c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fc6c 	bl	8000b00 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800022e:	f000 f8df 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2101      	movs	r1, #1
 800024c:	4618      	mov	r0, r3
 800024e:	f001 fb5f 	bl	8001910 <HAL_RCC_ClockConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000258:	f000 f8ca 	bl	80003f0 <Error_Handler>
  }
}
 800025c:	bf00      	nop
 800025e:	3740      	adds	r7, #64	; 0x40
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800027a:	4b51      	ldr	r3, [pc, #324]	; (80003c0 <MX_GPIO_Init+0x15c>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a50      	ldr	r2, [pc, #320]	; (80003c0 <MX_GPIO_Init+0x15c>)
 8000280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000284:	6153      	str	r3, [r2, #20]
 8000286:	4b4e      	ldr	r3, [pc, #312]	; (80003c0 <MX_GPIO_Init+0x15c>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	4b4b      	ldr	r3, [pc, #300]	; (80003c0 <MX_GPIO_Init+0x15c>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a4a      	ldr	r2, [pc, #296]	; (80003c0 <MX_GPIO_Init+0x15c>)
 8000298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800029c:	6153      	str	r3, [r2, #20]
 800029e:	4b48      	ldr	r3, [pc, #288]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002aa:	4b45      	ldr	r3, [pc, #276]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a44      	ldr	r2, [pc, #272]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b42      	ldr	r3, [pc, #264]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b3f      	ldr	r3, [pc, #252]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a3e      	ldr	r2, [pc, #248]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b3c      	ldr	r3, [pc, #240]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	4b39      	ldr	r3, [pc, #228]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a38      	ldr	r2, [pc, #224]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b36      	ldr	r3, [pc, #216]	; (80003c0 <MX_GPIO_Init+0x15c>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80002f2:	2200      	movs	r2, #0
 80002f4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80002f8:	4832      	ldr	r0, [pc, #200]	; (80003c4 <MX_GPIO_Init+0x160>)
 80002fa:	f000 fbe9 	bl	8000ad0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80002fe:	2337      	movs	r3, #55	; 0x37
 8000300:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000302:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	482c      	ldr	r0, [pc, #176]	; (80003c4 <MX_GPIO_Init+0x160>)
 8000314:	f000 fa62 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000318:	f64f 7308 	movw	r3, #65288	; 0xff08
 800031c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2300      	movs	r3, #0
 8000328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	4619      	mov	r1, r3
 8000330:	4824      	ldr	r0, [pc, #144]	; (80003c4 <MX_GPIO_Init+0x160>)
 8000332:	f000 fa53 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f000 fa46 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000350:	23e0      	movs	r3, #224	; 0xe0
 8000352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000354:	2302      	movs	r3, #2
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000360:	2305      	movs	r3, #5
 8000362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	4619      	mov	r1, r3
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f000 fa35 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000378:	2302      	movs	r3, #2
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000380:	2303      	movs	r3, #3
 8000382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000384:	230e      	movs	r3, #14
 8000386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	4619      	mov	r1, r3
 800038e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000392:	f000 fa23 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000396:	23c0      	movs	r3, #192	; 0xc0
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800039a:	2312      	movs	r3, #18
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2300      	movs	r3, #0
 80003a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003a6:	2304      	movs	r3, #4
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4619      	mov	r1, r3
 80003b0:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_GPIO_Init+0x164>)
 80003b2:	f000 fa13 	bl	80007dc <HAL_GPIO_Init>

}
 80003b6:	bf00      	nop
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	48001000 	.word	0x48001000
 80003c8:	48000400 	.word	0x48000400

080003cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d101      	bne.n	80003e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003de:	f000 f8fb 	bl	80005d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40001000 	.word	0x40001000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a08      	ldr	r2, [pc, #32]	; (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08c      	sub	sp, #48	; 0x30
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000454:	2200      	movs	r2, #0
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	2036      	movs	r0, #54	; 0x36
 800045a:	f000 f995 	bl	8000788 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800045e:	2036      	movs	r0, #54	; 0x36
 8000460:	f000 f9ae 	bl	80007c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000464:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <HAL_InitTick+0xa0>)
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	4a1e      	ldr	r2, [pc, #120]	; (80004e4 <HAL_InitTick+0xa0>)
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	61d3      	str	r3, [r2, #28]
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <HAL_InitTick+0xa0>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	f003 0310 	and.w	r3, r3, #16
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800047c:	f107 0210 	add.w	r2, r7, #16
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fc56 	bl	8001d38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800048c:	f001 fc32 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 8000490:	4603      	mov	r3, r0
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000498:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <HAL_InitTick+0xa4>)
 800049a:	fba2 2303 	umull	r2, r3, r2, r3
 800049e:	0c9b      	lsrs	r3, r3, #18
 80004a0:	3b01      	subs	r3, #1
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <HAL_InitTick+0xa8>)
 80004a6:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <HAL_InitTick+0xac>)
 80004a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <HAL_InitTick+0xa8>)
 80004ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_InitTick+0xa8>)
 80004b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_InitTick+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <HAL_InitTick+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <HAL_InitTick+0xa8>)
 80004c6:	f001 fc69 	bl	8001d9c <HAL_TIM_Base_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d104      	bne.n	80004da <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80004d0:	4806      	ldr	r0, [pc, #24]	; (80004ec <HAL_InitTick+0xa8>)
 80004d2:	f001 fcc5 	bl	8001e60 <HAL_TIM_Base_Start_IT>
 80004d6:	4603      	mov	r3, r0
 80004d8:	e000      	b.n	80004dc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3730      	adds	r7, #48	; 0x30
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	431bde83 	.word	0x431bde83
 80004ec:	200000b4 	.word	0x200000b4
 80004f0:	40001000 	.word	0x40001000

080004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <NMI_Handler+0x4>

080004fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler+0x4>

08000506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <BusFault_Handler+0x4>

0800050c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <UsageFault_Handler+0x4>

08000512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <TIM6_DAC_IRQHandler+0x10>)
 8000526:	f001 fd05 	bl	8001f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000b4 	.word	0x200000b4

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000590 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490e      	ldr	r1, [pc, #56]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0b      	ldr	r4, [pc, #44]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000582:	f7ff ffd7 	bl	8000534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000586:	f002 f8b9 	bl	80026fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f7ff fe21 	bl	80001d0 <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000590:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800059c:	080027ac 	.word	0x080027ac
  ldr r2, =_sbss
 80005a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a4:	20000104 	.word	0x20000104

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x28>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f8d8 	bl	8000772 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ff3e 	bl	8000444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f7ff ff18 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x20>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x24>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_IncTick+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000100 	.word	0x20000100

08000600 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return uwTick;  
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_GetTick+0x14>)
 8000606:	681b      	ldr	r3, [r3, #0]
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000100 	.word	0x20000100

08000618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <__NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	2b00      	cmp	r3, #0
 800068c:	db0b      	blt.n	80006a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 021f 	and.w	r2, r3, #31
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <__NVIC_EnableIRQ+0x38>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	095b      	lsrs	r3, r3, #5
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ff4c 	bl	8000618 <__NVIC_SetPriorityGrouping>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079a:	f7ff ff61 	bl	8000660 <__NVIC_GetPriorityGrouping>
 800079e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	68b9      	ldr	r1, [r7, #8]
 80007a4:	6978      	ldr	r0, [r7, #20]
 80007a6:	f7ff ffb1 	bl	800070c <NVIC_EncodePriority>
 80007aa:	4602      	mov	r2, r0
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff80 	bl	80006b8 <__NVIC_SetPriority>
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff54 	bl	800067c <__NVIC_EnableIRQ>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ea:	e154      	b.n	8000a96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	2101      	movs	r1, #1
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f000 8146 	beq.w	8000a90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b01      	cmp	r3, #1
 800080e:	d005      	beq.n	800081c <HAL_GPIO_Init+0x40>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	2b02      	cmp	r3, #2
 800081a:	d130      	bne.n	800087e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	2203      	movs	r2, #3
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	43db      	mvns	r3, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000852:	2201      	movs	r2, #1
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	4013      	ands	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	f003 0201 	and.w	r2, r3, #1
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	2b03      	cmp	r3, #3
 8000888:	d017      	beq.n	80008ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4013      	ands	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0303 	and.w	r3, r3, #3
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d123      	bne.n	800090e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	08da      	lsrs	r2, r3, #3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3208      	adds	r2, #8
 80008ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	220f      	movs	r2, #15
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	691a      	ldr	r2, [r3, #16]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	08da      	lsrs	r2, r3, #3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3208      	adds	r2, #8
 8000908:	6939      	ldr	r1, [r7, #16]
 800090a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	2203      	movs	r2, #3
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f003 0203 	and.w	r2, r3, #3
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800094a:	2b00      	cmp	r3, #0
 800094c:	f000 80a0 	beq.w	8000a90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000950:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <HAL_GPIO_Init+0x2d8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a57      	ldr	r2, [pc, #348]	; (8000ab4 <HAL_GPIO_Init+0x2d8>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <HAL_GPIO_Init+0x2d8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000968:	4a53      	ldr	r2, [pc, #332]	; (8000ab8 <HAL_GPIO_Init+0x2dc>)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	089b      	lsrs	r3, r3, #2
 800096e:	3302      	adds	r3, #2
 8000970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	220f      	movs	r2, #15
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000992:	d019      	beq.n	80009c8 <HAL_GPIO_Init+0x1ec>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a49      	ldr	r2, [pc, #292]	; (8000abc <HAL_GPIO_Init+0x2e0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d013      	beq.n	80009c4 <HAL_GPIO_Init+0x1e8>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a48      	ldr	r2, [pc, #288]	; (8000ac0 <HAL_GPIO_Init+0x2e4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d00d      	beq.n	80009c0 <HAL_GPIO_Init+0x1e4>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a47      	ldr	r2, [pc, #284]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d007      	beq.n	80009bc <HAL_GPIO_Init+0x1e0>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a46      	ldr	r2, [pc, #280]	; (8000ac8 <HAL_GPIO_Init+0x2ec>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d101      	bne.n	80009b8 <HAL_GPIO_Init+0x1dc>
 80009b4:	2304      	movs	r3, #4
 80009b6:	e008      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009b8:	2305      	movs	r3, #5
 80009ba:	e006      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009bc:	2303      	movs	r3, #3
 80009be:	e004      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e002      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e000      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009c8:	2300      	movs	r3, #0
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	f002 0203 	and.w	r2, r2, #3
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009da:	4937      	ldr	r1, [pc, #220]	; (8000ab8 <HAL_GPIO_Init+0x2dc>)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3302      	adds	r3, #2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e8:	4b38      	ldr	r3, [pc, #224]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a0c:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a36:	4a25      	ldr	r2, [pc, #148]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a60:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f47f aea3 	bne.w	80007ec <HAL_GPIO_Init+0x10>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48000c00 	.word	0x48000c00
 8000ac8:	48001000 	.word	0x48001000
 8000acc:	40010400 	.word	0x40010400

08000ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
 8000adc:	4613      	mov	r3, r2
 8000ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae0:	787b      	ldrb	r3, [r7, #1]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ae6:	887a      	ldrh	r2, [r7, #2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aee:	887a      	ldrh	r2, [r7, #2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f000 bef4 	b.w	8001902 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 816a 	beq.w	8000dfe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b2a:	4bb3      	ldr	r3, [pc, #716]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 030c 	and.w	r3, r3, #12
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d00c      	beq.n	8000b50 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b36:	4bb0      	ldr	r3, [pc, #704]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d159      	bne.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
 8000b42:	4bad      	ldr	r3, [pc, #692]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4e:	d152      	bne.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
 8000b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b54:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b58:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b5c:	fa93 f3a3 	rbit	r3, r3
 8000b60:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b64:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b68:	fab3 f383 	clz	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d102      	bne.n	8000b82 <HAL_RCC_OscConfig+0x82>
 8000b7c:	4b9e      	ldr	r3, [pc, #632]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	e015      	b.n	8000bae <HAL_RCC_OscConfig+0xae>
 8000b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b86:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b9e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ba2:	fa93 f3a3 	rbit	r3, r3
 8000ba6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000baa:	4b93      	ldr	r3, [pc, #588]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bb2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bb6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bba:	fa92 f2a2 	rbit	r2, r2
 8000bbe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000bc2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	f042 0220 	orr.w	r2, r2, #32
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	f002 021f 	and.w	r2, r2, #31
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 810c 	beq.w	8000dfc <HAL_RCC_OscConfig+0x2fc>
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f040 8106 	bne.w	8000dfc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f000 be86 	b.w	8001902 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c00:	d106      	bne.n	8000c10 <HAL_RCC_OscConfig+0x110>
 8000c02:	4b7d      	ldr	r3, [pc, #500]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a7c      	ldr	r2, [pc, #496]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e030      	b.n	8000c72 <HAL_RCC_OscConfig+0x172>
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x134>
 8000c1a:	4b77      	ldr	r3, [pc, #476]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a76      	ldr	r2, [pc, #472]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b74      	ldr	r3, [pc, #464]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a73      	ldr	r2, [pc, #460]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e01e      	b.n	8000c72 <HAL_RCC_OscConfig+0x172>
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c3e:	d10c      	bne.n	8000c5a <HAL_RCC_OscConfig+0x15a>
 8000c40:	4b6d      	ldr	r3, [pc, #436]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a6c      	ldr	r2, [pc, #432]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b6a      	ldr	r3, [pc, #424]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a69      	ldr	r2, [pc, #420]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e00b      	b.n	8000c72 <HAL_RCC_OscConfig+0x172>
 8000c5a:	4b67      	ldr	r3, [pc, #412]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a66      	ldr	r2, [pc, #408]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b64      	ldr	r3, [pc, #400]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a63      	ldr	r2, [pc, #396]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c72:	4b61      	ldr	r3, [pc, #388]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	f023 020f 	bic.w	r2, r3, #15
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	495d      	ldr	r1, [pc, #372]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000c82:	4313      	orrs	r3, r2
 8000c84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d059      	beq.n	8000d44 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fcb6 	bl	8000600 <HAL_GetTick>
 8000c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c98:	e00a      	b.n	8000cb0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9a:	f7ff fcb1 	bl	8000600 <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d902      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	f000 be29 	b.w	8001902 <HAL_RCC_OscConfig+0xe02>
 8000cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000cc4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d102      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x1e2>
 8000cdc:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	e015      	b.n	8000d0e <HAL_RCC_OscConfig+0x20e>
 8000ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000cee:	fa93 f3a3 	rbit	r3, r3
 8000cf2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000cfe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d1a:	fa92 f2a2 	rbit	r2, r2
 8000d1e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d22:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	f042 0220 	orr.w	r2, r2, #32
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	f002 021f 	and.w	r2, r2, #31
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0ab      	beq.n	8000c9a <HAL_RCC_OscConfig+0x19a>
 8000d42:	e05c      	b.n	8000dfe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fc5c 	bl	8000600 <HAL_GetTick>
 8000d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4c:	e00a      	b.n	8000d64 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4e:	f7ff fc57 	bl	8000600 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	; 0x64
 8000d5c:	d902      	bls.n	8000d64 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f000 bdcf 	b.w	8001902 <HAL_RCC_OscConfig+0xe02>
 8000d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d70:	fa93 f3a3 	rbit	r3, r3
 8000d74:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000d78:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7c:	fab3 f383 	clz	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d102      	bne.n	8000d96 <HAL_RCC_OscConfig+0x296>
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	e015      	b.n	8000dc2 <HAL_RCC_OscConfig+0x2c2>
 8000d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000db2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_RCC_OscConfig+0x2f8>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000dca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000dce:	fa92 f2a2 	rbit	r2, r2
 8000dd2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000dd6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000dda:	fab2 f282 	clz	r2, r2
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	f042 0220 	orr.w	r2, r2, #32
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	f002 021f 	and.w	r2, r2, #31
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1ab      	bne.n	8000d4e <HAL_RCC_OscConfig+0x24e>
 8000df6:	e002      	b.n	8000dfe <HAL_RCC_OscConfig+0x2fe>
 8000df8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 816f 	beq.w	80010ec <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e0e:	4bd0      	ldr	r3, [pc, #832]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e1a:	4bcd      	ldr	r3, [pc, #820]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d16c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x400>
 8000e26:	4bca      	ldr	r3, [pc, #808]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d166      	bne.n	8000f00 <HAL_RCC_OscConfig+0x400>
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e44:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e48:	fab3 f383 	clz	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <HAL_RCC_OscConfig+0x362>
 8000e5c:	4bbc      	ldr	r3, [pc, #752]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	e013      	b.n	8000e8a <HAL_RCC_OscConfig+0x38a>
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e68:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e86:	4bb2      	ldr	r3, [pc, #712]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e90:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e94:	fa92 f2a2 	rbit	r2, r2
 8000e98:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000e9c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	f042 0220 	orr.w	r2, r2, #32
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	f002 021f 	and.w	r2, r2, #31
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d007      	beq.n	8000ecc <HAL_RCC_OscConfig+0x3cc>
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d002      	beq.n	8000ecc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f000 bd1b 	b.w	8001902 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ecc:	4ba0      	ldr	r3, [pc, #640]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	21f8      	movs	r1, #248	; 0xf8
 8000edc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ee4:	fa91 f1a1 	rbit	r1, r1
 8000ee8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000eec:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000ef0:	fab1 f181 	clz	r1, r1
 8000ef4:	b2c9      	uxtb	r1, r1
 8000ef6:	408b      	lsls	r3, r1
 8000ef8:	4995      	ldr	r1, [pc, #596]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	e0f5      	b.n	80010ec <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8085 	beq.w	8001016 <HAL_RCC_OscConfig+0x516>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	461a      	mov	r2, r3
 8000f34:	2301      	movs	r3, #1
 8000f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb62 	bl	8000600 <HAL_GetTick>
 8000f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f42:	f7ff fb5d 	bl	8000600 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d902      	bls.n	8000f58 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f000 bcd5 	b.w	8001902 <HAL_RCC_OscConfig+0xe02>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6e:	fab3 f383 	clz	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	095b      	lsrs	r3, r3, #5
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d102      	bne.n	8000f88 <HAL_RCC_OscConfig+0x488>
 8000f82:	4b73      	ldr	r3, [pc, #460]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	e013      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4b0>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fa0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fac:	4b68      	ldr	r3, [pc, #416]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000fb6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fba:	fa92 f2a2 	rbit	r2, r2
 8000fbe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000fc2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fc6:	fab2 f282 	clz	r2, r2
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	f042 0220 	orr.w	r2, r2, #32
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	f002 021f 	and.w	r2, r2, #31
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0af      	beq.n	8000f42 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b5b      	ldr	r3, [pc, #364]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	21f8      	movs	r1, #248	; 0xf8
 8000ff2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ffa:	fa91 f1a1 	rbit	r1, r1
 8000ffe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001002:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001006:	fab1 f181 	clz	r1, r1
 800100a:	b2c9      	uxtb	r1, r1
 800100c:	408b      	lsls	r3, r1
 800100e:	4950      	ldr	r1, [pc, #320]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
 8001014:	e06a      	b.n	80010ec <HAL_RCC_OscConfig+0x5ec>
 8001016:	2301      	movs	r3, #1
 8001018:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001028:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001036:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	461a      	mov	r2, r3
 800103e:	2300      	movs	r3, #0
 8001040:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fadd 	bl	8000600 <HAL_GetTick>
 8001046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104a:	e00a      	b.n	8001062 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104c:	f7ff fad8 	bl	8000600 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d902      	bls.n	8001062 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	f000 bc50 	b.w	8001902 <HAL_RCC_OscConfig+0xe02>
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d102      	bne.n	8001092 <HAL_RCC_OscConfig+0x592>
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	e013      	b.n	80010ba <HAL_RCC_OscConfig+0x5ba>
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_RCC_OscConfig+0x650>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	2202      	movs	r2, #2
 80010bc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80010c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010c4:	fa92 f2a2 	rbit	r2, r2
 80010c8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80010cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f042 0220 	orr.w	r2, r2, #32
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	f002 021f 	and.w	r2, r2, #31
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1af      	bne.n	800104c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80da 	beq.w	80012b0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d069      	beq.n	80011da <HAL_RCC_OscConfig+0x6da>
 8001106:	2301      	movs	r3, #1
 8001108:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111c:	fab3 f383 	clz	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_RCC_OscConfig+0x654>)
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	461a      	mov	r2, r3
 800112c:	2301      	movs	r3, #1
 800112e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fa66 	bl	8000600 <HAL_GetTick>
 8001134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001138:	e00e      	b.n	8001158 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113a:	f7ff fa61 	bl	8000600 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d906      	bls.n	8001158 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e3d9      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	10908120 	.word	0x10908120
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800116a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800116e:	2202      	movs	r2, #2
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	fa93 f2a3 	rbit	r2, r3
 800117c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001186:	2202      	movs	r2, #2
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	fa93 f2a3 	rbit	r2, r3
 8001194:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001198:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	4ba5      	ldr	r3, [pc, #660]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800119c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800119e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011a2:	2102      	movs	r1, #2
 80011a4:	6019      	str	r1, [r3, #0]
 80011a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	fa93 f1a3 	rbit	r1, r3
 80011b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011b4:	6019      	str	r1, [r3, #0]
  return result;
 80011b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0b0      	beq.n	800113a <HAL_RCC_OscConfig+0x63a>
 80011d8:	e06a      	b.n	80012b0 <HAL_RCC_OscConfig+0x7b0>
 80011da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fa93 f2a3 	rbit	r2, r3
 80011ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011f0:	601a      	str	r2, [r3, #0]
  return result;
 80011f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	4b8c      	ldr	r3, [pc, #560]	; (8001434 <HAL_RCC_OscConfig+0x934>)
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	461a      	mov	r2, r3
 8001208:	2300      	movs	r3, #0
 800120a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff f9f8 	bl	8000600 <HAL_GetTick>
 8001210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001214:	e009      	b.n	800122a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001216:	f7ff f9f3 	bl	8000600 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e36b      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
 800122a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800122e:	2202      	movs	r2, #2
 8001230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fa93 f2a3 	rbit	r2, r3
 800123c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001246:	2202      	movs	r2, #2
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	fa93 f2a3 	rbit	r2, r3
 8001254:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800125e:	2202      	movs	r2, #2
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	fa93 f2a3 	rbit	r2, r3
 800126c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001270:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001272:	4b6f      	ldr	r3, [pc, #444]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 8001274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001276:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800127a:	2102      	movs	r1, #2
 800127c:	6019      	str	r1, [r3, #0]
 800127e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	fa93 f1a3 	rbit	r1, r3
 8001288:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800128c:	6019      	str	r1, [r3, #0]
  return result;
 800128e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1b2      	bne.n	8001216 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8158 	beq.w	8001570 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c6:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d112      	bne.n	80012f8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b57      	ldr	r3, [pc, #348]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a56      	ldr	r2, [pc, #344]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b54      	ldr	r3, [pc, #336]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <HAL_RCC_OscConfig+0x938>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11a      	bne.n	800133a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001304:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <HAL_RCC_OscConfig+0x938>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a4b      	ldr	r2, [pc, #300]	; (8001438 <HAL_RCC_OscConfig+0x938>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001310:	f7ff f976 	bl	8000600 <HAL_GetTick>
 8001314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	e009      	b.n	800132e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff f971 	bl	8000600 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e2e9      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b42      	ldr	r3, [pc, #264]	; (8001438 <HAL_RCC_OscConfig+0x938>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0ef      	beq.n	800131a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x852>
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a39      	ldr	r2, [pc, #228]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6213      	str	r3, [r2, #32]
 8001350:	e02f      	b.n	80013b2 <HAL_RCC_OscConfig+0x8b2>
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0x876>
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a33      	ldr	r2, [pc, #204]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a30      	ldr	r2, [pc, #192]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800136e:	f023 0304 	bic.w	r3, r3, #4
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e01d      	b.n	80013b2 <HAL_RCC_OscConfig+0x8b2>
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b05      	cmp	r3, #5
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x89a>
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a2a      	ldr	r2, [pc, #168]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	e00b      	b.n	80013b2 <HAL_RCC_OscConfig+0x8b2>
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d06b      	beq.n	8001494 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013bc:	f7ff f920 	bl	8000600 <HAL_GetTick>
 80013c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	e00b      	b.n	80013de <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff f91b 	bl	8000600 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e291      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
 80013de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013e2:	2202      	movs	r2, #2
 80013e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fa93 f2a3 	rbit	r2, r3
 80013f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013fa:	2202      	movs	r2, #2
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800140c:	601a      	str	r2, [r3, #0]
  return result;
 800140e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001412:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d109      	bne.n	800143c <HAL_RCC_OscConfig+0x93c>
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <HAL_RCC_OscConfig+0x930>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	e014      	b.n	8001458 <HAL_RCC_OscConfig+0x958>
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	10908120 	.word	0x10908120
 8001438:	40007000 	.word	0x40007000
 800143c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001440:	2202      	movs	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f2a3 	rbit	r2, r3
 800144e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	4bbb      	ldr	r3, [pc, #748]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800145c:	2102      	movs	r1, #2
 800145e:	6011      	str	r1, [r2, #0]
 8001460:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	fa92 f1a2 	rbit	r1, r2
 800146a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800146e:	6011      	str	r1, [r2, #0]
  return result;
 8001470:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	fab2 f282 	clz	r2, r2
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	f002 021f 	and.w	r2, r2, #31
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d099      	beq.n	80013c6 <HAL_RCC_OscConfig+0x8c6>
 8001492:	e063      	b.n	800155c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001494:	f7ff f8b4 	bl	8000600 <HAL_GetTick>
 8001498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149e:	f7ff f8af 	bl	8000600 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e225      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
 80014b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ba:	2202      	movs	r2, #2
 80014bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fa93 f2a3 	rbit	r2, r3
 80014c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014e4:	601a      	str	r2, [r3, #0]
  return result;
 80014e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0xa06>
 8001500:	4b90      	ldr	r3, [pc, #576]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	e00d      	b.n	8001522 <HAL_RCC_OscConfig+0xa22>
 8001506:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800150a:	2202      	movs	r2, #2
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001526:	2102      	movs	r1, #2
 8001528:	6011      	str	r1, [r2, #0]
 800152a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	fa92 f1a2 	rbit	r1, r2
 8001534:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001538:	6011      	str	r1, [r2, #0]
  return result;
 800153a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	fab2 f282 	clz	r2, r2
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	f002 021f 	and.w	r2, r2, #31
 8001550:	2101      	movs	r1, #1
 8001552:	fa01 f202 	lsl.w	r2, r1, r2
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1a0      	bne.n	800149e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800155c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	4a76      	ldr	r2, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 800156a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 81c2 	beq.w	8001900 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157c:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	f000 819c 	beq.w	80018c2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	2b02      	cmp	r3, #2
 8001592:	f040 8114 	bne.w	80017be <HAL_RCC_OscConfig+0xcbe>
 8001596:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800159a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800159e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f2a3 	rbit	r2, r3
 80015aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015ae:	601a      	str	r2, [r3, #0]
  return result;
 80015b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	461a      	mov	r2, r3
 80015c8:	2300      	movs	r3, #0
 80015ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff f818 	bl	8000600 <HAL_GetTick>
 80015d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff f813 	bl	8000600 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e18b      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
 80015ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001602:	601a      	str	r2, [r3, #0]
  return result;
 8001604:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001608:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_RCC_OscConfig+0xb24>
 800161e:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	e01b      	b.n	800165c <HAL_RCC_OscConfig+0xb5c>
 8001624:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fa93 f2a3 	rbit	r2, r3
 8001638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	fa93 f2a3 	rbit	r2, r3
 8001652:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001660:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001664:	6011      	str	r1, [r2, #0]
 8001666:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	fa92 f1a2 	rbit	r1, r2
 8001670:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001674:	6011      	str	r1, [r2, #0]
  return result;
 8001676:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	fab2 f282 	clz	r2, r2
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f042 0220 	orr.w	r2, r2, #32
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	f002 021f 	and.w	r2, r2, #31
 800168c:	2101      	movs	r1, #1
 800168e:	fa01 f202 	lsl.w	r2, r1, r2
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d19e      	bne.n	80015d6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	4925      	ldr	r1, [pc, #148]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fa93 f2a3 	rbit	r2, r3
 80016c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016cc:	601a      	str	r2, [r3, #0]
  return result;
 80016ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d4:	fab3 f383 	clz	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	461a      	mov	r2, r3
 80016e6:	2301      	movs	r3, #1
 80016e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7fe ff89 	bl	8000600 <HAL_GetTick>
 80016ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f2:	e009      	b.n	8001708 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7fe ff84 	bl	8000600 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0fc      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
 8001708:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800170c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001720:	601a      	str	r2, [r3, #0]
  return result;
 8001722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001726:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0xc48>
 800173c:	4b01      	ldr	r3, [pc, #4]	; (8001744 <HAL_RCC_OscConfig+0xc44>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	e01e      	b.n	8001780 <HAL_RCC_OscConfig+0xc80>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800174c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_OscConfig+0xe0c>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001784:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001788:	6011      	str	r1, [r2, #0]
 800178a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	fa92 f1a2 	rbit	r1, r2
 8001794:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001798:	6011      	str	r1, [r2, #0]
  return result;
 800179a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	fab2 f282 	clz	r2, r2
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	f042 0220 	orr.w	r2, r2, #32
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	f002 021f 	and.w	r2, r2, #31
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d09b      	beq.n	80016f4 <HAL_RCC_OscConfig+0xbf4>
 80017bc:	e0a0      	b.n	8001900 <HAL_RCC_OscConfig+0xe00>
 80017be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	601a      	str	r2, [r3, #0]
  return result;
 80017d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	461a      	mov	r2, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7fe ff04 	bl	8000600 <HAL_GetTick>
 80017f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	e009      	b.n	8001812 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7fe feff 	bl	8000600 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e077      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
 8001812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800181a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fa93 f2a3 	rbit	r2, r3
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	601a      	str	r2, [r3, #0]
  return result;
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0xd4c>
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_OscConfig+0xe0c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	e01b      	b.n	8001884 <HAL_RCC_OscConfig+0xd84>
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_RCC_OscConfig+0xe0c>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	f107 0210 	add.w	r2, r7, #16
 8001888:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800188c:	6011      	str	r1, [r2, #0]
 800188e:	f107 0210 	add.w	r2, r7, #16
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	fa92 f1a2 	rbit	r1, r2
 8001898:	f107 020c 	add.w	r2, r7, #12
 800189c:	6011      	str	r1, [r2, #0]
  return result;
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	fab2 f282 	clz	r2, r2
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	f042 0220 	orr.w	r2, r2, #32
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	f002 021f 	and.w	r2, r2, #31
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d19e      	bne.n	80017fe <HAL_RCC_OscConfig+0xcfe>
 80018c0:	e01e      	b.n	8001900 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e018      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_RCC_OscConfig+0xe0c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d108      	bne.n	80018fc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80018ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09e      	sub	sp, #120	; 0x78
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e162      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b90      	ldr	r3, [pc, #576]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b8d      	ldr	r3, [pc, #564]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	498b      	ldr	r1, [pc, #556]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e14a      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b82      	ldr	r3, [pc, #520]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	497f      	ldr	r1, [pc, #508]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80dc 	beq.w	8001b3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d13c      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xf6>
 800198c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001990:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800199a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xa6>
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e00f      	b.n	80019d6 <HAL_RCC_ClockConfig+0xc6>
 80019b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	667b      	str	r3, [r7, #100]	; 0x64
 80019c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c8:	663b      	str	r3, [r7, #96]	; 0x60
 80019ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019da:	65ba      	str	r2, [r7, #88]	; 0x58
 80019dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019de:	fa92 f2a2 	rbit	r2, r2
 80019e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80019e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019e6:	fab2 f282 	clz	r2, r2
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f002 021f 	and.w	r2, r2, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d17b      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0f3      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d13c      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x178>
 8001a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	095b      	lsrs	r3, r3, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d102      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x128>
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	e00f      	b.n	8001a58 <HAL_RCC_ClockConfig+0x148>
 8001a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
 8001a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a60:	fa92 f2a2 	rbit	r2, r2
 8001a64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d13a      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b2      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	e00d      	b.n	8001acc <HAL_RCC_ClockConfig+0x1bc>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2202      	movs	r2, #2
 8001ace:	61ba      	str	r2, [r7, #24]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	617a      	str	r2, [r7, #20]
  return result;
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e079      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	491a      	ldr	r1, [pc, #104]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7fe fd78 	bl	8000600 <HAL_GetTick>
 8001b10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7fe fd74 	bl	8000600 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e061      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d214      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4906      	ldr	r1, [pc, #24]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e040      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	491a      	ldr	r1, [pc, #104]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4912      	ldr	r1, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bb2:	f000 f829 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc0:	22f0      	movs	r2, #240	; 0xf0
 8001bc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	fa92 f2a2 	rbit	r2, r2
 8001bca:	60fa      	str	r2, [r7, #12]
  return result;
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	40d3      	lsrs	r3, r2
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x2ec>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	fa21 f303 	lsr.w	r3, r1, r3
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_RCC_ClockConfig+0x2f0>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_RCC_ClockConfig+0x2f4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc2c 	bl	8000444 <HAL_InitTick>
  
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3778      	adds	r7, #120	; 0x78
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	0800276c 	.word	0x0800276c
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b08b      	sub	sp, #44	; 0x2c
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c22:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x30>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x36>
 8001c36:	e03c      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	e03c      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	fa92 f2a2 	rbit	r2, r2
 8001c50:	607a      	str	r2, [r7, #4]
  return result;
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	40d3      	lsrs	r3, r2
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	60fa      	str	r2, [r7, #12]
  return result;
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	40d3      	lsrs	r3, r2
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e004      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	623b      	str	r3, [r7, #32]
      break;
 8001cb0:	e002      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cb4:	623b      	str	r3, [r7, #32]
      break;
 8001cb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	372c      	adds	r7, #44	; 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	007a1200 	.word	0x007a1200
 8001cd0:	08002784 	.word	0x08002784
 8001cd4:	08002794 	.word	0x08002794
 8001cd8:	003d0900 	.word	0x003d0900

08001cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001cfa:	f7ff ffef 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001cfe:	4601      	mov	r1, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	603a      	str	r2, [r7, #0]
  return result;
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	40d3      	lsrs	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	0800277c 	.word	0x0800277c

08001d38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	220f      	movs	r2, #15
 8001d46:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_RCC_GetClockConfig+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0207 	and.w	r2, r3, #7
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40022000 	.word	0x40022000

08001d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e049      	b.n	8001e42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f841 	bl	8001e4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f000 f9f2 	bl	80021c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d001      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e04a      	b.n	8001f0e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea2:	d013      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d115      	bne.n	8001ef8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d015      	beq.n	8001f0a <HAL_TIM_Base_Start_IT+0xaa>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d011      	beq.n	8001f0a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef6:	e008      	b.n	8001f0a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e000      	b.n	8001f0c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40013400 	.word	0x40013400
 8001f2c:	40014000 	.word	0x40014000
 8001f30:	00010007 	.word	0x00010007

08001f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d122      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d11b      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0202 	mvn.w	r2, #2
 8001f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f905 	bl	8002186 <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8f7 	bl	8002172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f908 	bl	800219a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d122      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d11b      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0204 	mvn.w	r2, #4
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8db 	bl	8002186 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8cd 	bl	8002172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8de 	bl	800219a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d122      	bne.n	8002038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d11b      	bne.n	8002038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0208 	mvn.w	r2, #8
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2204      	movs	r2, #4
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8b1 	bl	8002186 <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8a3 	bl	8002172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8b4 	bl	800219a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b10      	cmp	r3, #16
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b10      	cmp	r3, #16
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0210 	mvn.w	r2, #16
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2208      	movs	r2, #8
 8002062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f887 	bl	8002186 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f879 	bl	8002172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f88a 	bl	800219a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0201 	mvn.w	r2, #1
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe f98a 	bl	80003cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	2b80      	cmp	r3, #128	; 0x80
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f90a 	bl	80022f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f2:	d10e      	bne.n	8002112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fe:	2b80      	cmp	r3, #128	; 0x80
 8002100:	d107      	bne.n	8002112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800210a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8fd 	bl	800230c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211c:	2b40      	cmp	r3, #64	; 0x40
 800211e:	d10e      	bne.n	800213e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d107      	bne.n	800213e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f838 	bl	80021ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b20      	cmp	r3, #32
 800214a:	d10e      	bne.n	800216a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b20      	cmp	r3, #32
 8002158:	d107      	bne.n	800216a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f06f 0220 	mvn.w	r2, #32
 8002162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8bd 	bl	80022e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <TIM_Base_SetConfig+0x104>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00f      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e2:	d00b      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a39      	ldr	r2, [pc, #228]	; (80022cc <TIM_Base_SetConfig+0x108>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a38      	ldr	r2, [pc, #224]	; (80022d0 <TIM_Base_SetConfig+0x10c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a37      	ldr	r2, [pc, #220]	; (80022d4 <TIM_Base_SetConfig+0x110>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d108      	bne.n	800220e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <TIM_Base_SetConfig+0x104>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01b      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d017      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <TIM_Base_SetConfig+0x108>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <TIM_Base_SetConfig+0x10c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00f      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <TIM_Base_SetConfig+0x110>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00b      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <TIM_Base_SetConfig+0x114>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a26      	ldr	r2, [pc, #152]	; (80022dc <TIM_Base_SetConfig+0x118>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d003      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <TIM_Base_SetConfig+0x11c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d108      	bne.n	8002260 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <TIM_Base_SetConfig+0x104>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00f      	beq.n	80022ac <TIM_Base_SetConfig+0xe8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <TIM_Base_SetConfig+0x110>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00b      	beq.n	80022ac <TIM_Base_SetConfig+0xe8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <TIM_Base_SetConfig+0x114>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <TIM_Base_SetConfig+0xe8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <TIM_Base_SetConfig+0x118>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0xe8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <TIM_Base_SetConfig+0x11c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d103      	bne.n	80022b4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	615a      	str	r2, [r3, #20]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40000800 	.word	0x40000800
 80022d4:	40013400 	.word	0x40013400
 80022d8:	40014000 	.word	0x40014000
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40014800 	.word	0x40014800

080022e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800232a:	4b7d      	ldr	r3, [pc, #500]	; (8002520 <xTaskIncrementTick+0x200>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80ec 	bne.w	800250c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002334:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <xTaskIncrementTick+0x204>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800233c:	4a79      	ldr	r2, [pc, #484]	; (8002524 <xTaskIncrementTick+0x204>)
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d120      	bne.n	800238a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002348:	4b77      	ldr	r3, [pc, #476]	; (8002528 <xTaskIncrementTick+0x208>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002364:	bf00      	nop
 8002366:	e7fe      	b.n	8002366 <xTaskIncrementTick+0x46>
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <xTaskIncrementTick+0x208>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <xTaskIncrementTick+0x20c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6d      	ldr	r2, [pc, #436]	; (8002528 <xTaskIncrementTick+0x208>)
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4a6d      	ldr	r2, [pc, #436]	; (800252c <xTaskIncrementTick+0x20c>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b6c      	ldr	r3, [pc, #432]	; (8002530 <xTaskIncrementTick+0x210>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	4a6b      	ldr	r2, [pc, #428]	; (8002530 <xTaskIncrementTick+0x210>)
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	f000 f93d 	bl	8002604 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <xTaskIncrementTick+0x214>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a3a      	ldr	r2, [r7, #32]
 8002390:	429a      	cmp	r2, r3
 8002392:	f0c0 80a6 	bcc.w	80024e2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002396:	4b64      	ldr	r3, [pc, #400]	; (8002528 <xTaskIncrementTick+0x208>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a0:	4b64      	ldr	r3, [pc, #400]	; (8002534 <xTaskIncrementTick+0x214>)
 80023a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a6:	601a      	str	r2, [r3, #0]
                    break;
 80023a8:	e09b      	b.n	80024e2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <xTaskIncrementTick+0x208>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80023ba:	6a3a      	ldr	r2, [r7, #32]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d203      	bcs.n	80023ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80023c2:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <xTaskIncrementTick+0x214>)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80023c8:	e08b      	b.n	80024e2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	68d2      	ldr	r2, [r2, #12]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	3304      	adds	r3, #4
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d103      	bne.n	80023f8 <xTaskIncrementTick+0xd8>
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2200      	movs	r2, #0
 80023fc:	615a      	str	r2, [r3, #20]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1e5a      	subs	r2, r3, #1
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01e      	beq.n	800244e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	6a12      	ldr	r2, [r2, #32]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	69d2      	ldr	r2, [r2, #28]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	3318      	adds	r3, #24
 8002432:	429a      	cmp	r2, r3
 8002434:	d103      	bne.n	800243e <xTaskIncrementTick+0x11e>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2200      	movs	r2, #0
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	1e5a      	subs	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	2201      	movs	r2, #1
 8002454:	409a      	lsls	r2, r3
 8002456:	4b38      	ldr	r3, [pc, #224]	; (8002538 <xTaskIncrementTick+0x218>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	4a36      	ldr	r2, [pc, #216]	; (8002538 <xTaskIncrementTick+0x218>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	4935      	ldr	r1, [pc, #212]	; (800253c <xTaskIncrementTick+0x21c>)
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3304      	adds	r3, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	3204      	adds	r2, #4
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1d1a      	adds	r2, r3, #4
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <xTaskIncrementTick+0x21c>)
 80024a4:	441a      	add	r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	615a      	str	r2, [r3, #20]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	4923      	ldr	r1, [pc, #140]	; (800253c <xTaskIncrementTick+0x21c>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1c59      	adds	r1, r3, #1
 80024be:	481f      	ldr	r0, [pc, #124]	; (800253c <xTaskIncrementTick+0x21c>)
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4403      	add	r3, r0
 80024ca:	6019      	str	r1, [r3, #0]
                    {
                        /* Preemption is on, but a context switch should
                         * only be performed if the unblocked task has a
                         * priority that is equal to or higher than the
                         * currently executing task. */
                        if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <xTaskIncrementTick+0x220>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	429a      	cmp	r2, r3
 80024d8:	f4ff af5d 	bcc.w	8002396 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80024dc:	2301      	movs	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024e0:	e759      	b.n	8002396 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <xTaskIncrementTick+0x220>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	4914      	ldr	r1, [pc, #80]	; (800253c <xTaskIncrementTick+0x21c>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d901      	bls.n	80024fe <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80024fa:	2301      	movs	r3, #1
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <xTaskIncrementTick+0x224>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002506:	2301      	movs	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
 800250a:	e004      	b.n	8002516 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <xTaskIncrementTick+0x228>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <xTaskIncrementTick+0x228>)
 8002514:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002518:	4618      	mov	r0, r3
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200000b0 	.word	0x200000b0
 8002524:	20000098 	.word	0x20000098
 8002528:	20000090 	.word	0x20000090
 800252c:	20000094 	.word	0x20000094
 8002530:	200000a8 	.word	0x200000a8
 8002534:	200000ac 	.word	0x200000ac
 8002538:	2000009c 	.word	0x2000009c
 800253c:	2000002c 	.word	0x2000002c
 8002540:	20000028 	.word	0x20000028
 8002544:	200000a4 	.word	0x200000a4
 8002548:	200000a0 	.word	0x200000a0

0800254c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002552:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <vTaskSwitchContext+0xa4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <vTaskSwitchContext+0xa8>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
             * for additional information. */
            _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002560:	e03f      	b.n	80025e2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <vTaskSwitchContext+0xa8>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <vTaskSwitchContext+0xac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	f1c3 031f 	rsb	r3, r3, #31
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	491f      	ldr	r1, [pc, #124]	; (80025fc <vTaskSwitchContext+0xb0>)
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	607b      	str	r3, [r7, #4]
    }
 80025a4:	bf00      	nop
 80025a6:	e7fe      	b.n	80025a6 <vTaskSwitchContext+0x5a>
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <vTaskSwitchContext+0xb0>)
 80025b4:	4413      	add	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3308      	adds	r3, #8
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d104      	bne.n	80025d8 <vTaskSwitchContext+0x8c>
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4a08      	ldr	r2, [pc, #32]	; (8002600 <vTaskSwitchContext+0xb4>)
 80025e0:	6013      	str	r3, [r2, #0]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200000b0 	.word	0x200000b0
 80025f4:	200000a4 	.word	0x200000a4
 80025f8:	2000009c 	.word	0x2000009c
 80025fc:	2000002c 	.word	0x2000002c
 8002600:	20000028 	.word	0x20000028

08002604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <prvResetNextTaskUnblockTime+0x30>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <prvResetNextTaskUnblockTime+0x34>)
 8002614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002618:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800261a:	e005      	b.n	8002628 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <prvResetNextTaskUnblockTime+0x30>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <prvResetNextTaskUnblockTime+0x34>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000090 	.word	0x20000090
 8002638:	200000ac 	.word	0x200000ac
 800263c:	00000000 	.word	0x00000000

08002640 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <pxCurrentTCBConst2>)
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	6808      	ldr	r0, [r1, #0]
 8002646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800264a:	f380 8809 	msr	PSP, r0
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f380 8811 	msr	BASEPRI, r0
 800265a:	f04e 0e0d 	orr.w	lr, lr, #13
 800265e:	4770      	bx	lr

08002660 <pxCurrentTCBConst2>:
 8002660:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
	...

08002670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002670:	f3ef 8009 	mrs	r0, PSP
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <pxCurrentTCBConst>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002680:	6010      	str	r0, [r2, #0]
 8002682:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002686:	f04f 0050 	mov.w	r0, #80	; 0x50
 800268a:	f380 8811 	msr	BASEPRI, r0
 800268e:	f7ff ff5d 	bl	800254c <vTaskSwitchContext>
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f380 8811 	msr	BASEPRI, r0
 800269a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	6808      	ldr	r0, [r1, #0]
 80026a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026a6:	f380 8809 	msr	PSP, r0
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	4770      	bx	lr

080026b0 <pxCurrentTCBConst>:
 80026b0:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop

080026b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
        __asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	607b      	str	r3, [r7, #4]
    }
 80026d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80026d2:	f7ff fe25 	bl	8002320 <xTaskIncrementTick>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <SysTick_Handler+0x40>)
 80026de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80026ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <__libc_init_array>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	4d0d      	ldr	r5, [pc, #52]	; (8002734 <__libc_init_array+0x38>)
 8002700:	4c0d      	ldr	r4, [pc, #52]	; (8002738 <__libc_init_array+0x3c>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	2600      	movs	r6, #0
 8002708:	42a6      	cmp	r6, r4
 800270a:	d109      	bne.n	8002720 <__libc_init_array+0x24>
 800270c:	4d0b      	ldr	r5, [pc, #44]	; (800273c <__libc_init_array+0x40>)
 800270e:	4c0c      	ldr	r4, [pc, #48]	; (8002740 <__libc_init_array+0x44>)
 8002710:	f000 f820 	bl	8002754 <_init>
 8002714:	1b64      	subs	r4, r4, r5
 8002716:	10a4      	asrs	r4, r4, #2
 8002718:	2600      	movs	r6, #0
 800271a:	42a6      	cmp	r6, r4
 800271c:	d105      	bne.n	800272a <__libc_init_array+0x2e>
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	f855 3b04 	ldr.w	r3, [r5], #4
 8002724:	4798      	blx	r3
 8002726:	3601      	adds	r6, #1
 8002728:	e7ee      	b.n	8002708 <__libc_init_array+0xc>
 800272a:	f855 3b04 	ldr.w	r3, [r5], #4
 800272e:	4798      	blx	r3
 8002730:	3601      	adds	r6, #1
 8002732:	e7f2      	b.n	800271a <__libc_init_array+0x1e>
 8002734:	080027a4 	.word	0x080027a4
 8002738:	080027a4 	.word	0x080027a4
 800273c:	080027a4 	.word	0x080027a4
 8002740:	080027a8 	.word	0x080027a8

08002744 <memset>:
 8002744:	4402      	add	r2, r0
 8002746:	4603      	mov	r3, r0
 8002748:	4293      	cmp	r3, r2
 800274a:	d100      	bne.n	800274e <memset+0xa>
 800274c:	4770      	bx	lr
 800274e:	f803 1b01 	strb.w	r1, [r3], #1
 8002752:	e7f9      	b.n	8002748 <memset+0x4>

08002754 <_init>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr

08002760 <_fini>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr
